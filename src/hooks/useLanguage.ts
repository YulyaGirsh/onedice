import { useCallback, useSyncExternalStore } from 'react';
import { locales, type Locale, getDefaultLanguage } from '../locales';

const LANGUAGE_STORAGE_KEY = 'dice-game-language';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–æ—Ä —è–∑—ã–∫–∞, —á—Ç–æ–±—ã –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –±–µ–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
type LanguageListener = () => void;
const languageListeners = new Set<LanguageListener>();

let currentLanguageState: Locale = (() => {
  if (typeof window !== 'undefined') {
    const saved = localStorage.getItem(LANGUAGE_STORAGE_KEY) as Locale;
    if (saved && locales[saved]) return saved;
  }
  return getDefaultLanguage();
})();

function subscribeLanguage(listener: LanguageListener) {
  languageListeners.add(listener);
  return () => languageListeners.delete(listener);
}

function setGlobalLanguage(lang: Locale) {
  if (!locales[lang] || currentLanguageState === lang) return;
  currentLanguageState = lang;
  if (typeof window !== 'undefined') {
    localStorage.setItem(LANGUAGE_STORAGE_KEY, currentLanguageState);
  }
  // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
  languageListeners.forEach((l) => {
    try { l(); } catch { /* noop */ }
  });
}

function getGlobalLanguage() {
  return currentLanguageState;
}

// –¢–∏–ø –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö
type InterpolationParams = Record<string, string | number>;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –ø—É—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'common.close')
function getNestedValue(obj: any, path: string): string {
  return path.split('.').reduce((current, key) => current?.[key], obj) || path;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —Å—Ç—Ä–æ–∫–µ
function interpolate(template: string, params: InterpolationParams = {}): string {
  return template.replace(/\{\{(\w+)\}\}/g, (match, key) => {
    return params[key]?.toString() || match;
  });
}

export const useLanguage = () => {
  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–æ—Ä —è–∑—ã–∫–∞
  const currentLanguage = useSyncExternalStore(
    subscribeLanguage,
    getGlobalLanguage,
    getGlobalLanguage
  );

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
  const changeLanguage = useCallback((language: Locale) => {
    setGlobalLanguage(language);
  }, []);

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
  const t = useCallback((key: string, params?: InterpolationParams): string => {
    const currentLocale = locales[currentLanguage];
    if (!currentLocale) {
      console.warn(`Locale '${currentLanguage}' not found`);
      return key;
    }

    const translation = getNestedValue(currentLocale, key);
    
    if (translation === key) {
      console.warn(`Translation key '${key}' not found for locale '${currentLanguage}'`);
      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ —Ä—É—Å—Å–∫–æ–º –∫–∞–∫ fallback
      const fallbackTranslation = getNestedValue(locales.ru, key);
      if (fallbackTranslation !== key) {
        return params ? interpolate(fallbackTranslation, params) : fallbackTranslation;
      }
    }

    return params ? interpolate(translation, params) : translation;
  }, [currentLanguage]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —è–∑—ã–∫–µ
  const getCurrentLanguageInfo = useCallback(() => {
    const supportedLanguages = [
      { code: 'ru', name: t('languages.ru'), flag: 'üá∑üá∫', nativeName: t('nativeNames.ru') },
    { code: 'en', name: t('languages.en'), flag: 'üá∫üá∏', nativeName: t('nativeNames.en') },
    { code: 'zh', name: t('languages.zh'), flag: 'üá®üá≥', nativeName: t('nativeNames.zh') }
    ];
    
    return supportedLanguages.find(lang => lang.code === currentLanguage) || supportedLanguages[0];
  }, [currentLanguage, t]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –∫–ª—é—á –ø–µ—Ä–µ–≤–æ–¥–∞
  const hasTranslation = useCallback((key: string): boolean => {
    const currentLocale = locales[currentLanguage];
    if (!currentLocale) return false;
    
    const translation = getNestedValue(currentLocale, key);
    return translation !== key;
  }, [currentLanguage]);

  return {
    currentLanguage,
    changeLanguage,
    t,
    getCurrentLanguageInfo,
    hasTranslation,
    availableLanguages: [
      { code: 'ru', name: t('languages.ru'), flag: 'üá∑üá∫', nativeName: t('nativeNames.ru') },
    { code: 'en', name: t('languages.en'), flag: 'üá∫üá∏', nativeName: t('nativeNames.en') },
    { code: 'zh', name: t('languages.zh'), flag: 'üá®üá≥', nativeName: t('nativeNames.zh') }
    ] as const,
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–µ–º
    getThemeNames: useCallback(() => {
      return [
        { code: 'system', name: t('settings.themes.system'), description: t('settings.themes.systemDescription'), icon: 'üîÑ' },
        { code: 'light', name: t('settings.themes.light'), description: t('settings.themes.lightDescription'), icon: '‚òÄÔ∏è' },
        { code: 'dark', name: t('settings.themes.dark'), description: t('settings.themes.darkDescription'), icon: 'üåô' }
      ];
    }, [t])
  };
};

export default useLanguage;