import { useEffect, useState, useCallback } from 'react';
import { Game, CreateGameData, PlayerRating } from '../types';
import { apiService } from '../services/api';

/**
 * üéØ –í–ê–ñ–ù–û –î–õ–Ø –ë–≠–ö–ï–ù–î–ê:
 * 
 * 1. playerRating.rating - —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1000)
 * 2. playerRating.ratingTitle - –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–µ–π—Ç–∏–Ω–≥–∞ (–Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ UI, —Ç–æ–ª—å–∫–æ –¥–ª—è API)
 * 3. updatePlayerRating(newRating, newTitle) - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ—Å–ª–µ –∏–≥—Ä
 * 
 * –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° API:
 * - –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è: –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ updatePlayerRating()
 * - –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã: –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –æ–±–Ω–æ–≤–∏—Ç—å
 * - –í RatingPage: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è playerRating.rating –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * - –í ProfileHeader: –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ playerRating.rating
 * 
 * –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –° API:
 * 
 * // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è:
 * const { updatePlayerRating, updatePlayerStats } = useGameData();
 * useEffect(() => {
 *   api.getUserProfile().then(profile => {
 *     updatePlayerRating(profile.rating, profile.ratingTitle);
 *     updatePlayerStats(profile.gamesPlayed, profile.gamesWon);
 *   });
 * }, []);
 * 
 * // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã:
 * const { finishGame } = useGameData();
 * const result = finishGame(isWin);
 * console.log(`–ù–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥: ${result.newRating} (${result.ratingChange >= 0 ? '+' : ''}${result.ratingChange})`);
 */

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ (–ø–æ–∫–∞ API –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç)
export const useGameData = () => {
  const [allGames, setAllGames] = useState<Game[]>([]);
  const [myGames, setMyGames] = useState<Game[]>([]);
  const [balance] = useState<number>(2.5); // –¢–µ—Å—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –≤ TON
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  // –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–∞ - —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
  const [playerRating, setPlayerRating] = useState<PlayerRating>({
    rating: 0,
    ratingTitle: '–°—Ç–∞—Ä—Ç–æ–≤—ã–π'
  });

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä –∏–≥—Ä–æ–∫–∞
  const [playerStats, setPlayerStats] = useState<{
    gamesPlayed: number;
    gamesWon: number;
  }>({
    gamesPlayed: 0,
    gamesWon: 0
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ (–¥–ª—è –±—É–¥—É—â–µ–≥–æ API)
  const updatePlayerRating = (newRating: number, newTitle?: string) => {
    setPlayerRating(prev => ({
      rating: newRating,
      ratingTitle: newTitle || prev.ratingTitle
    }));
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä
  const updatePlayerStats = (gamesPlayed: number, gamesWon: number) => {
    setPlayerStats({ gamesPlayed, gamesWon });
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø–æ–±–µ–¥
  const getWinRate = () => {
    return playerStats.gamesPlayed > 0 ? Math.round((playerStats.gamesWon / playerStats.gamesPlayed) * 100) : 0;
  };

  // –õ–æ–≥–∏–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤ –ø–æ—Å–ª–µ –∏–≥—Ä—ã (1v1)
  const calculateRatingChange = (isWin: boolean) => {
    if (isWin) {
      return 5; // –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç +5
    } else {
      return -3; // –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π –ø–æ–ª—É—á–∞–µ—Ç -3
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const finishGame = (isWin: boolean) => {
    const ratingChange = calculateRatingChange(isWin);
    const newRating = Math.max(0, playerRating.rating + ratingChange); // –†–µ–π—Ç–∏–Ω–≥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏–∂–µ 0
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
    setPlayerRating(prev => ({
      ...prev,
      rating: newRating
    }));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    setPlayerStats(prev => ({
      gamesPlayed: prev.gamesPlayed + 1,
      gamesWon: isWin ? prev.gamesWon + 1 : prev.gamesWon
    }));

    return {
      newRating,
      ratingChange,
      newWinRate: playerStats.gamesPlayed + 1 > 0 
        ? Math.round(((isWin ? playerStats.gamesWon + 1 : playerStats.gamesWon) / (playerStats.gamesPlayed + 1)) * 100) 
        : 0
    };
  };

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getCurrentUserId = () => {
    if (window.Telegram?.WebApp?.initDataUnsafe?.user?.id) {
      return window.Telegram.WebApp.initDataUnsafe.user.id.toString();
    }
    return '123456789';
  };

  const getCurrentUserName = () => {
    if (window.Telegram?.WebApp?.initDataUnsafe?.user) {
      const user = window.Telegram.WebApp.initDataUnsafe.user;
      const fullName = `${user.first_name} ${user.last_name || ''}`.trim();
      return fullName || user.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    }
    return '–ò–≥—Ä–æ–∫';
  };

  const getCurrentUserData = () => {
    if (window.Telegram?.WebApp?.initDataUnsafe?.user) {
      const user = window.Telegram.WebApp.initDataUnsafe.user;
      const firstName = user.first_name?.trim();
      const lastName = user.last_name?.trim();
      const username = user.username?.trim();
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
      if (firstName || lastName) {
        return {
          first_name: firstName || '',
          last_name: lastName || '',
          telegramUsername: username || ''
        };
      }
      
      // –ï—Å–ª–∏ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å username, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –∏–º—è
      if (username) {
        return {
          first_name: username,
          last_name: '',
          telegramUsername: username
        };
      }
      
      // –ï—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
      return {
        first_name: `–ò–≥—Ä–æ–∫ ${user.id?.toString().slice(-4) || Math.floor(Math.random() * 1000)}`,
        last_name: '',
        telegramUsername: ''
      };
    }
    // fallback –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    return {
      first_name: '–î–∞–Ω–∏–ª',
      last_name: '–ë–µ—Ä–µ–∑–∏–Ω',
      telegramUsername: 'danil_berezin'
    };
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–±–±–∏
  const loadLobbies = useCallback(async () => {
    console.log('Starting to load lobbies...');
    try {
      setIsLoading(true);
      setError(null);
      // –î–ª—è –≤–∫–ª–∞–¥–∫–∏ "–í—Å–µ" –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ –ª–æ–±–±–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞ (is_public = 1)
      const lobbies = await apiService.getLobbies(false);
      console.log('Received lobbies from API:', lobbies);
      const currentUserId = getCurrentUserId();
      const apiGames = lobbies.map(lobby => apiService.mapApiResponseToGame(lobby, currentUserId));
      console.log('Mapped games:', apiGames);
      setAllGames(apiGames);
    } catch (err) {
      console.error('Error loading lobbies:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä');
    } finally {
      setIsLoading(false);
    }
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ "–º–æ–∏—Ö" –ª–æ–±–±–∏
  const loadMyLobbies = useCallback(async () => {
    console.log('Starting to load my lobbies...');
    try {
      setIsLoading(true);
      setError(null);
      const currentUserId = getCurrentUserId();
      const myLobbies = await apiService.getUserLobbies(currentUserId);
      console.log('Received my lobbies from API:', myLobbies);
      const apiGames = myLobbies.map(lobby => apiService.mapApiResponseToGame(lobby, currentUserId));
      console.log('Mapped my games:', apiGames);
      setMyGames(apiGames);
    } catch (err) {
      console.error('Error loading my lobbies:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–∏ –∏–≥—Ä—ã');
    } finally {
      setIsLoading(false);
    }
  }, []);

  const refreshLobbies = useCallback(async () => {
    await Promise.all([loadLobbies(), loadMyLobbies()]);
  }, [loadLobbies, loadMyLobbies]);

  // –£–î–ê–õ–ï–ù–û: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ª–æ–±–±–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  // –¢–µ–ø–µ—Ä—å –ª–æ–±–±–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–∞—Ç–∏–∏ "–ú–æ–∏ –∏–≥—Ä—ã"

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ
  const onJoinGame = async (gameId: string) => {
    try {
      setIsLoading(true);
      setError(null);
      let game = allGames.find(g => g.id === gameId) || myGames.find(g => g.id === gameId);
      if (!game) {
        const lobby = await apiService.getLobby(gameId);
        const mapped = apiService.mapApiResponseToGame(lobby, getCurrentUserId());
        if (!mapped.isPrivate) {
          setAllGames(prev => (prev.some(g => g.id === mapped.id) ? prev.map(g => g.id === mapped.id ? mapped : g) : [...prev, mapped]));
        }
        if (mapped.isMyGame) {
          setMyGames(prev => (prev.some(g => g.id === mapped.id) ? prev.map(g => g.id === mapped.id ? mapped : g) : [...prev, mapped]));
        }
        game = mapped;
      }
      if (!game) throw new Error('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      if (game.status === 'ready') throw new Error('–ò–≥—Ä–∞ —É–∂–µ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É');
      if (game.currentPlayers >= game.maxPlayers) throw new Error('–ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
      if (game.price > balance) throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TON! –£ –≤–∞—Å: ${balance} TON, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${game.price} TON`);

      const updatedLobby = await apiService.joinLobby(gameId, getCurrentUserId(), getCurrentUserData());
      const updatedGame = apiService.mapApiResponseToGame(updatedLobby, getCurrentUserId());
      setAllGames(prev => {
        if (!updatedGame.isPrivate) {
          const index = prev.findIndex(g => g.id === updatedGame.id);
          if (index !== -1) {
            return prev.map((g, i) => i === index ? updatedGame : g);
          } else {
            return [...prev, updatedGame];
          }
        } else {
          return prev.filter(g => g.id !== updatedGame.id);
        }
      });
      setMyGames(prev => {
        if (updatedGame.isMyGame) {
          const index = prev.findIndex(g => g.id === updatedGame.id);
          if (index !== -1) {
            return prev.map((g, i) => i === index ? updatedGame : g);
          } else {
            return [...prev, updatedGame];
          }
        } else {
          return prev.filter(g => g.id !== updatedGame.id);
        }
      });
      return updatedGame;
    } catch (error) {
      const msg = error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ';
      setError(msg);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã —á–µ—Ä–µ–∑ API
  const createGame = async (gameData: CreateGameData) => {
    if (gameData.price > balance) {
      const message = `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TON! –£ –≤–∞—Å: ${balance} TON, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${gameData.price} TON`;
      window.Telegram?.WebApp?.showAlert ? window.Telegram.WebApp.showAlert(message) : alert(message);
      window.Telegram?.WebApp?.hapticFeedback?.notificationOccurred('error');
      return null;
    }

    try {
      setIsLoading(true);
      setError(null);
      const createdLobby = await apiService.createLobby(gameData, getCurrentUserId(), getCurrentUserName());
      const newGame = apiService.mapApiResponseToGame(createdLobby, getCurrentUserId());
      if (!newGame.isPrivate) {
        setAllGames(prev => [...prev, newGame]);
      }
      setMyGames(prev => [...prev, newGame]);
      window.Telegram?.WebApp?.hapticFeedback?.notificationOccurred('success');
      return newGame;
    } catch (err) {
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É');
      window.Telegram?.WebApp?.hapticFeedback?.notificationOccurred('error');
      const errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
      window.Telegram?.WebApp?.showAlert ? window.Telegram.WebApp.showAlert(errorMessage) : alert(errorMessage);
      return null;
    } finally {
      setIsLoading(false);
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –ª–æ–±–±–∏
  const deleteLobby = async (gameId: string) => {
    try {
      setIsLoading(true);
      setError(null);
      await apiService.deleteLobby(gameId, getCurrentUserId());
      setAllGames(prev => prev.filter(g => g.id !== gameId));
      setMyGames(prev => prev.filter(g => g.id !== gameId));
      window.Telegram?.WebApp?.hapticFeedback?.notificationOccurred('success');
    } catch (err) {
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ª–æ–±–±–∏');
      window.Telegram?.WebApp?.hapticFeedback?.notificationOccurred('error');
      const errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ª–æ–±–±–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
      window.Telegram?.WebApp?.showAlert ? window.Telegram.WebApp.showAlert(errorMessage) : alert(errorMessage);
      throw err;
    } finally {
      setIsLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    const fetchUserStats = async () => {
      try {
        const userId = getCurrentUserId();
        const stats = await apiService.getUserStats(userId);
        updatePlayerRating(stats.rating, '–°—Ç–∞—Ä—Ç–æ–≤—ã–π'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ç–∏—Ç—É–ª –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π
        updatePlayerStats(stats.gamesPlayed, stats.gamesWon);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      }
    };
    fetchUserStats();
  }, []);

  const removeLobbyFromState = (gameId: string) => {
    setAllGames(prev => prev.filter(g => g.id !== gameId));
    setMyGames(prev => prev.filter(g => g.id !== gameId));
  };

  return {
    allGames,
    myGames,
    balance,
    playerRating,
    playerStats,
    updatePlayerRating,
    updatePlayerStats,
    getWinRate,
    isLoading,
    error,
    finishGame,
    onJoinGame,
    createGame,
    deleteLobby,
    removeLobbyFromState,
    loadLobbies,
    loadMyLobbies,
    refreshLobbies,
    getCurrentUserId,
    getCurrentUserData
  };
};