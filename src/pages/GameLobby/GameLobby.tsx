import React, { useState, useEffect, useRef } from 'react';
import { Game, Player } from '../../types';
import { useTelegramWebApp } from '../../hooks/useTelegramWebApp';
import { useLanguage } from '../../hooks/useLanguage';
import styles from './GameLobby.module.css';
import { FaCrown, FaHourglassHalf, FaShareSquare, FaDoorOpen, FaPlay } from 'react-icons/fa';
import { apiService } from '../../services/api';

import { API_BASE_URL } from '../../config/api';
import { buildStartAppJoinUrl, buildShareUrl } from '../../config/telegram';

interface GameLobbyProps {
  game: Game;
  onBack: () => void;
  onStartGame?: () => void;
  onJoinGame?: (gameId: string) => Promise<Game | undefined>;
  onPlayersUpdate?: (players: Player[]) => void;
  onLeaveLobby?: () => void;
  onPlayerLeft?: (playerName: string) => void;
  onPlayerJoined?: (playerName: string) => void;
}

const GameLobby: React.FC<GameLobbyProps> = ({ game, onBack, onStartGame, onJoinGame, onPlayersUpdate, onLeaveLobby, onPlayerLeft, onPlayerJoined }) => {
  const [isLoading, setIsLoading] = useState(false);
  const bottomStickyRef = useRef<HTMLDivElement>(null);
  const [currentGame, setCurrentGame] = useState<Game>(game);
  const [players, setPlayers] = useState<Player[]>([]);
  const [previousPlayers, setPreviousPlayers] = useState<Player[]>([]);
  const [isFirstLoad, setIsFirstLoad] = useState(true);
  const [isReady, setIsReady] = useState(false);
  const [hasJoinedLobby, setHasJoinedLobby] = useState(false);
  const [isJoining, setIsJoining] = useState(false);
  const [playerAvatars, setPlayerAvatars] = useState<{[playerId: string]: string}>({});
  // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å localStorage
  const webApp = useTelegramWebApp();
  const { t } = useLanguage();

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ª–æ–±–±–∏
    const keysToRemove = [];
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key && key.startsWith('lobby_join_attempt_')) {
        keysToRemove.push(key);
      }
    }
    keysToRemove.forEach(key => localStorage.removeItem(key));
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è –ª–æ–±–±–∏
  useEffect(() => {
    const currentUserId = getCurrentUser()?.id?.toString();
    if (game.creatorId === currentUserId || game.creatorId?.toString() === currentUserId || game.isMyGame) {
      console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –ª–æ–±–±–∏');
      setHasJoinedLobby(true);
    }
  }, [game.id, game.creatorId, game.isMyGame]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getCurrentUser = () => {
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram WebApp
    if (webApp?.initDataUnsafe?.user) {
      console.log('üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram WebApp:', webApp.initDataUnsafe.user);
      return webApp.initDataUnsafe.user;
    }
    
    // Fallback –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ localStorage, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –¥–ª—è —Å–µ—Å—Å–∏–∏
    let developmentUserId = localStorage.getItem('development_user_id');
    if (!developmentUserId) {
      developmentUserId = `dev_${Date.now()}_${Math.floor(Math.random() * 1000)}`;
      localStorage.setItem('development_user_id', developmentUserId);
    }
    
    console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å ID:', developmentUserId);
    return {
      id: developmentUserId,
      first_name: '–î–∞–Ω–∏–ª',
      last_name: '–ë–µ—Ä–µ–∑–∏–Ω',
      username: 'danil_berezin'
    };
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  const getCurrentUserData = () => {
    const u: any = webApp?.initDataUnsafe?.user;
    if (u) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–∏
      const firstName = u.first_name?.trim();
      const lastName = u.last_name?.trim();
      const username = u.username?.trim();
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
      if (firstName || lastName) {
        return {
          first_name: firstName || '',
          last_name: lastName || '',
          telegramUsername: username || ''
        };
      }
      
      // –ï—Å–ª–∏ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å username, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –∏–º—è
      if (username) {
        return {
          first_name: username,
          last_name: '',
          telegramUsername: username
        };
      }
      
      // –ï—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
      return {
        first_name: `–ò–≥—Ä–æ–∫ ${u.id?.toString().slice(-4) || Math.floor(Math.random() * 1000)}`,
        last_name: '',
        telegramUsername: ''
      };
    }
    // fallback –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    return {
      first_name: '–î–∞–Ω–∏–ª',
      last_name: '–ë–µ—Ä–µ–∑–∏–Ω',
      telegramUsername: 'danil_berezin'
    };
  };



  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞
  const getPlayerName = (player: Player) => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤–æ–µ –∏–º—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ–ª–µ name), –∫–æ—Ç–æ—Ä–æ–µ —É–∂–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    if (player.name) {
      console.log('üë• –ò–º—è –∏–≥—Ä–æ–∫–∞ –∏–∑ name:', player.name);
      return player.name;
    }
    // Fallback –Ω–∞ telegramData –µ—Å–ª–∏ name –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
    if (player.telegramData?.first_name) {
      const fullName = `${player.telegramData.first_name} ${player.telegramData.last_name || ''}`.trim();
      console.log('üë• –ò–º—è –∏–≥—Ä–æ–∫–∞ –∏–∑ Telegram:', fullName);
      return fullName;
    }
    const fallbackName = player.username || t('common.player');
    console.log('üë• Fallback –∏–º—è –∏–≥—Ä–æ–∫–∞:', fallbackName);
    return fallbackName;
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
  const loadPlayerAvatars = async (playersList: Player[]) => {
    const avatarPromises = playersList.map(async (player) => {
      try {
        const avatar = await apiService.getUserAvatar(player.id);
        return { playerId: player.id, avatar };
      } catch (error) {
        console.log(`–ê–≤–∞—Ç–∞—Ä–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${player.id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:`, error);
        return { playerId: player.id, avatar: null };
      }
    });
    
    const results = await Promise.all(avatarPromises);
    const avatarsMap: {[playerId: string]: string} = {};
    
    results.forEach(({ playerId, avatar }) => {
      if (avatar) {
        avatarsMap[playerId] = avatar;
      }
    });
    
    setPlayerAvatars(avatarsMap);
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –∏–≥—Ä–æ–∫–∞
  const getPlayerAvatar = (player: Player) => {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë
    const selectedAvatar = playerAvatars[player.id];
    if (selectedAvatar) {
      return (
        <img 
          src={`/img/ava/${selectedAvatar}.jpg`} 
          alt={`Avatar ${selectedAvatar}`}
          style={{ width: '100%', height: '100%', objectFit: 'cover', borderRadius: '50%' }}
        />
      );
    }
    
    // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª—ã
    let initials = '–ò';
    if (player.telegramData?.first_name) {
      initials = player.telegramData.first_name.charAt(0).toUpperCase();
    } else if (player.name) {
      initials = player.name.charAt(0).toUpperCase();
    } else if (player.username) {
      initials = player.username.charAt(0).toUpperCase();
    }
    
    return initials;
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –ª–æ–±–±–∏
  const autoJoinLobby = async () => {
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    if (isJoining) {
      console.log('–£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
      return;
    }
    
    const currentUserId = getCurrentUser()?.id?.toString() || `dev_${Date.now()}_${Math.floor(Math.random() * 1000)}`;
    
    // –ò–ó–ú–ï–ù–ï–ù–û: –£–±—Ä–∞–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è! –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–≤–æ–µ–º—É –ª–æ–±–±–∏
    // if (game.creatorId === currentUserId || game.creatorId?.toString() === currentUserId) {
    //   console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: –°–æ–∑–¥–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º—É –ª–æ–±–±–∏');
    //   setHasJoinedLobby(true);
    //   return;
    // }
    
    // if (game.isMyGame) {
    //   console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: –≠—Ç–æ –º–æ–µ –ª–æ–±–±–∏, –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è');
    //   setHasJoinedLobby(true);
    //   return;
    // }

    // –ï—Å–ª–∏ –ª–æ–±–±–∏ —É–∂–µ –≤ —Å—Ç–∞—Ç—É—Å–µ ready/playing ‚Äî –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è
    if (currentGame.status === 'ready' || currentGame.status === 'playing') {
      console.log('üö´ –õ–æ–±–±–∏ —É–∂–µ –≥–æ—Ç–æ–≤–æ/–≤ –∏–≥—Ä–µ, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
      setHasJoinedLobby(true);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (hasJoinedLobby) {
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –ª–æ–±–±–∏');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    const joinAttemptKey = `lobby_join_attempt_${game.id}_${currentUserId}`;
    const lastAttempt = localStorage.getItem(joinAttemptKey);
    if (lastAttempt) {
      const timeSinceLastAttempt = Date.now() - parseInt(lastAttempt);
      if (timeSinceLastAttempt < 30000) { // 30 —Å–µ–∫—É–Ω–¥
        console.log('–ù–µ–¥–∞–≤–Ω–æ —É–∂–µ –±—ã–ª–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
        return;
      }
    }

    if (!onJoinGame) {
      console.log('onJoinGame –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
      return;
    }

    try {
      setIsJoining(true);
      
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–æ–±–±–∏
      const lobbyResponse = await fetch(`${API_BASE_URL}/games/${game.id}`);
      if (!lobbyResponse.ok) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ª–æ–±–±–∏');
      }
      
      const lobbyData = await lobbyResponse.json();

      // –ï—Å–ª–∏ –ª–æ–±–±–∏ —É–∂–µ –≥–æ—Ç–æ–≤–æ/–∏–¥–µ—Ç –∏–≥—Ä–∞ ‚Äî –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
      if (lobbyData.status === 'ready' || lobbyData.status === 'playing') {
        console.log('üö´ –õ–æ–±–±–∏ —É–∂–µ –≤ —Å—Ç–∞—Ç—É—Å–µ ready/playing, –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è');
        setHasJoinedLobby(true);
        // –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤ localStorage, —á—Ç–æ–±—ã –±–æ–ª—å—à–µ –Ω–µ –ø—ã—Ç–∞—Ç—å—Å—è
        localStorage.setItem(joinAttemptKey, Date.now().toString());
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const isAlreadyJoined = lobbyData.players?.some((player: any) => player.id === currentUserId);
      if (isAlreadyJoined) {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ª–æ–±–±–∏');
        setHasJoinedLobby(true);
        setPlayers(lobbyData.players || []);
        setCurrentGame(prev => ({ ...prev, currentPlayers: lobbyData.players?.length || 0 }));
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ localStorage, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è
        localStorage.setItem(joinAttemptKey, Date.now().toString());
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ –ª–æ–±–±–∏
      if (lobbyData.players?.length >= lobbyData.maxPlayers) {
        console.log('–õ–æ–±–±–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ');
        webApp?.showAlert(t('lobby.lobbyFull'));
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ –ø–æ–ø—ã—Ç–∫–∏
        setHasJoinedLobby(true);
        localStorage.setItem(joinAttemptKey, Date.now().toString());
        return;
      }

      // –û—Ç–º–µ—á–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      localStorage.setItem(joinAttemptKey, Date.now().toString());
      
      // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –ª–æ–±–±–∏
      const response = await fetch(`${API_BASE_URL}/games/${game.id}/join`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          player: {
            id: currentUserId,
            first_name: getCurrentUserData().first_name,
            last_name: getCurrentUserData().last_name,
            telegramUsername: getCurrentUserData().telegramUsername,
          },
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        if (errorData.error === 'lobby full') {
          console.log('–õ–æ–±–±–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ (–æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞)');
          webApp?.showAlert(t('lobby.lobbyFull'));
          // –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ –ø–æ–ø—ã—Ç–∫–∏
          setHasJoinedLobby(true);
          return;
        }
        throw new Error(errorData.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ª–æ–±–±–∏');
      }

      const updatedLobby = await response.json();
      console.log('–£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ª–æ–±–±–∏:', updatedLobby);
      
      setHasJoinedLobby(true);
      setPlayers(updatedLobby.players || []);
      setCurrentGame(prev => ({ ...prev, currentPlayers: updatedLobby.players?.length || 0 }));
      
      // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
      webApp?.hapticFeedback.notificationOccurred('success');
      
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π heartbeat –ø–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      try {
        const uid = currentUserId;
        fetch(`${API_BASE_URL}/games/${game.id}/heartbeat`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ playerId: uid, screen: 'lobby' })
        }).catch(() => {});
      } catch {}
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
      
      // –£–¥–∞–ª—è–µ–º –æ—Ç–º–µ—Ç–∫—É –æ –ø–æ–ø—ã—Ç–∫–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ (–∫—Ä–æ–º–µ —Å–ª—É—á–∞—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –ª–æ–±–±–∏)
      if (!(error instanceof Error && (error.message.includes('full') || error.message.includes('–∑–∞–ø–æ–ª–Ω–µ–Ω–æ')))) {
        localStorage.removeItem(joinAttemptKey);
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞ "–ª–æ–±–±–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"
      if (error instanceof Error && !error.message.includes('full') && !error.message.includes('–∑–∞–ø–æ–ª–Ω–µ–Ω–æ')) {
        const errorMessage = t('lobby.joinFailed');
        webApp?.showAlert(errorMessage) || alert(errorMessage);
        
        // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ–± –æ—à–∏–±–∫–µ
        webApp?.hapticFeedback.notificationOccurred('error');
      }
    } finally {
      setIsJoining(false);
      // –ù–µ –∏–∑–º–µ–Ω—è–µ–º hasJoinedLobby –∑–¥–µ—Å—å: –∏–º —É–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —Ñ–∞–∫—Ç—É —Å—Ç–∞—Ç—É—Å–∞/—É—Å–ø–µ—Ö–∞
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–±–±–∏ (–±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)
  const loadLobbyInfo = async () => {
    try {
      setIsLoading(true);
      
      const response = await fetch(`${API_BASE_URL}/games/${game.id}`);
      if (!response.ok) {
        throw new Error(t('lobby.fetchFailed'));
      }
      
      const lobbyData = await response.json();
      const currentUserId = getCurrentUser()?.id?.toString() || `dev_${Date.now()}_${Math.floor(Math.random() * 1000)}`;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
      const isCreator = game.creatorId === currentUserId || game.creatorId?.toString() === currentUserId || game.isMyGame;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const isAlreadyJoined = lobbyData.players?.some((player: any) => player.id === currentUserId);
      if (isAlreadyJoined) {
        setHasJoinedLobby(true);
        // –ü–æ–º–µ—á–∞–µ–º –≤ localStorage, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
        const joinAttemptKey = `lobby_join_attempt_${game.id}_${currentUserId}`;
        localStorage.setItem(joinAttemptKey, Date.now().toString());
        
        console.log('üéØ loadLobbyInfo: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –ª–æ–±–±–∏');
      } else if (isCreator) {
        console.log('üéØ loadLobbyInfo: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –ª–æ–±–±–∏, –Ω–æ –µ—â–µ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è');
      }
      
      const realPlayers: Player[] = (lobbyData.players || []).map((player: any) => {
        // –°–µ—Ä–≤–µ—Ä —É–∂–µ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç displayName –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –ø–æ–ª–µ username
        const displayName = player.username || 'anonymous';
        
        return {
          id: player.id,
          name: displayName, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤–æ–µ –∏–º—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
          role: player.role,
          joinedAt: player.joinedAt,
          isReady: player.isReady || false, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç—É—Å —Å —Å–µ—Ä–≤–µ—Ä–∞
          online: player.online !== false, // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –æ–Ω–ª–∞–π–Ω
          telegramData: {
            id: parseInt(player.id),
            first_name: '',
            last_name: '',
            username: player.username || ''
          }
        };
      });
      
      console.log('üéÆ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–æ–±–±–∏:', {
        lobbyId: game.id,
        playersCount: realPlayers.length,
        players: realPlayers,
        currentUserId: currentUserId,
        isCreator: isCreator,
        isAlreadyJoined: isAlreadyJoined
      });
      
      setPlayers(realPlayers);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
      loadPlayerAvatars(realPlayers);
      
      // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤ –≤ App.tsx
      onPlayersUpdate?.(realPlayers);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
      setCurrentGame(prev => ({
        ...prev,
        currentPlayers: lobbyData.players?.length || 0,
        maxPlayers: lobbyData.maxPlayers || 2,
        status: lobbyData.status || 'waiting'
      }));
      
      console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–±–±–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', realPlayers);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–±–±–∏:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–±–±–∏
  const updateLobbyInfo = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/games/${game.id}`);
      if (!response.ok) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ª–æ–±–±–∏');
      }
      
      const lobbyData = await response.json();
      const currentUserId = getCurrentUser()?.id?.toString() || `dev_${Date.now()}_${Math.floor(Math.random() * 1000)}`;
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      const realPlayers: Player[] = (lobbyData.players || []).map((player: any) => {
        // –°–µ—Ä–≤–µ—Ä —É–∂–µ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç displayName –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –ø–æ–ª–µ username
        const displayName = player.username || 'anonymous';
        
        return {
          id: player.id,
          name: displayName, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤–æ–µ –∏–º—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
          role: player.role,
          joinedAt: player.joinedAt,
          isReady: player.isReady || false, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç—É—Å —Å —Å–µ—Ä–≤–µ—Ä–∞
          telegramData: {
            id: parseInt(player.id),
            first_name: '',
            last_name: '',
            username: player.username || ''
          }
        };
      });
      
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–∞–≤–µ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏)
      if (!isFirstLoad && previousPlayers.length > 0) {
        const previousPlayerIds = previousPlayers.map(p => p.id);
        const newPlayerIds = realPlayers.map(p => p.id);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å)
        const joinedPlayerIds = newPlayerIds.filter(id => !previousPlayerIds.includes(id) && id !== currentUserId);
        joinedPlayerIds.forEach(playerId => {
          const player = realPlayers.find(p => p.id === playerId);
          if (player && player.name && onPlayerJoined) {
            onPlayerJoined(player.name);
          }
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—à–µ–¥—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
        const leftPlayerIds = previousPlayerIds.filter(id => !newPlayerIds.includes(id) && id !== currentUserId);
        leftPlayerIds.forEach(playerId => {
          const player = previousPlayers.find(p => p.id === playerId);
          if (player && player.name && onPlayerLeft) {
            onPlayerLeft(player.name);
          }
        });
      }
      
      // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
      if (isFirstLoad) {
        setIsFirstLoad(false);
      }
      
      // –ï—Å–ª–∏ –ª–æ–±–±–∏ —É–∂–µ –≥–æ—Ç–æ–≤–æ –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ ‚Äî –±–ª–æ–∫–∏—Ä—É–µ–º –±—É–¥—É—â–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      if (lobbyData.status === 'ready' || lobbyData.status === 'playing' || (lobbyData.players?.length >= lobbyData.maxPlayers)) {
        setHasJoinedLobby(true);
      }
      
      setPreviousPlayers(players);
      setPlayers(realPlayers);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
      loadPlayerAvatars(realPlayers);
      
      setCurrentGame(prev => ({ ...prev, currentPlayers: lobbyData.players?.length || 0, status: lobbyData.status }));

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const currentPlayer = realPlayers.find(player => player.id === currentUserId);
      if (currentPlayer) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–µ—Ä–Ω—É–ª—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ–¥–∞–≤–Ω–æ –∏–∑ –∏–≥—Ä—ã
        const now = Date.now();
        const exitTimeKey = `exit_from_game_${game.id}`;
        const exitTimeStr = localStorage.getItem(exitTimeKey);
        const exitTime = exitTimeStr ? parseInt(exitTimeStr) : null;
        const recentlyExitedFromGame = exitTime && (now - exitTime) < 5000; // 5 —Å–µ–∫—É–Ω–¥
        
        if (recentlyExitedFromGame && !currentPlayer.isReady) {
          // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ–¥–∞–≤–Ω–æ –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã –∏ —Å–µ—Ä–≤–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç "–Ω–µ –≥–æ—Ç–æ–≤", —Å–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç–æ—Ç —Å—Ç–∞—Ç—É—Å
          console.log('üö´ –ò–≥—Ä–æ–∫ –Ω–µ–¥–∞–≤–Ω–æ –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å "–Ω–µ –≥–æ—Ç–æ–≤"');
          setIsReady(false);
        } else if (!recentlyExitedFromGame) {
          // –û–±—ã—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –≤—ã—Ö–æ–¥–∏–ª –Ω–µ–¥–∞–≤–Ω–æ –∏–∑ –∏–≥—Ä—ã
          setIsReady(currentPlayer.isReady || false);
          // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å –æ –≤—ã—Ö–æ–¥–µ –∏–∑ –∏–≥—Ä—ã
          if (exitTime) {
            localStorage.removeItem(exitTimeKey);
          }
        }
        // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ–¥–∞–≤–Ω–æ –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã –∏ —Å–µ—Ä–≤–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç "–≥–æ—Ç–æ–≤", –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      }

      // –ï—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ ‚Äì –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫–æ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
      if (lobbyData.status === 'playing' && onStartGame) {
        onStartGame();
      }
      
      console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ª–æ–±–±–∏:', realPlayers);
      
      const isCreator = game.creatorId === currentUserId || game.creatorId?.toString() === currentUserId || game.isMyGame;
      const isUserInLobby = lobbyData.players?.some((player: any) => player.id === currentUserId);
      
      if (isUserInLobby) {
        setHasJoinedLobby(true);
        // –û–±–Ω–æ–≤–ª—è–µ–º localStorage, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è
        const joinAttemptKey = `lobby_join_attempt_${game.id}_${currentUserId}`;
        localStorage.setItem(joinAttemptKey, Date.now().toString());
        
        console.log('üéØ updateLobbyInfo: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ª–æ–±–±–∏');
      } else if (isCreator) {
        console.log('üéØ updateLobbyInfo: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –ª–æ–±–±–∏, –Ω–æ –µ—â–µ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è');
      } else if (lobbyData.players?.length >= lobbyData.maxPlayers) {
        // –ï—Å–ª–∏ –ª–æ–±–±–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ localStorage
        const joinAttemptKey = `lobby_join_attempt_${game.id}_${currentUserId}`;
        localStorage.setItem(joinAttemptKey, Date.now().toString());
      }
      // –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ updateLobbyInfo
      // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ useEffect
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–±–±–∏:', error);
    }
  };

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ª–æ–±–±–∏ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
  useEffect(() => {
    let isMounted = true;
    
    const initialJoin = async () => {
      if (!isMounted) return;
      

      
      // –ò–ó–ú–ï–ù–ï–ù–û: –£–±—Ä–∞–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è! –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–≤–æ–µ–º—É –ª–æ–±–±–∏
      // if (game.creatorId === initialUserId || game.creatorId?.toString() === initialUserId || game.isMyGame) {
      //   console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –ª–æ–±–±–∏, –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
      //   setHasJoinedLobby(true);
      //   return;
      // }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (hasJoinedLobby) {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –ª–æ–±–±–∏');
        return;
      }
      
      console.log('–í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –ª–æ–±–±–∏');
      await autoJoinLobby();
    };
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è
    const timeoutId = setTimeout(initialJoin, 100);
    
    return () => {
      isMounted = false;
      clearTimeout(timeoutId);
      
      // –û—á–∏—â–∞–µ–º localStorage –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      const cleanupUserId = getCurrentUser()?.id?.toString() || `dev_${Date.now()}_${Math.floor(Math.random() * 1000)}`;
      const joinAttemptKey = `lobby_join_attempt_${game.id}_${cleanupUserId}`;
      localStorage.removeItem(joinAttemptKey);
    };
  }, [game.id, hasJoinedLobby]); // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–º–µ–Ω–µ –∏–≥—Ä—ã –∏–ª–∏ –µ—â–µ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ª–æ–±–±–∏
  useEffect(() => {
    loadLobbyInfo();
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ—Ç
    const forceLoadInterval = setInterval(() => {
      if (players.length === 0) {
        console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ª–æ–±–±–∏ (–Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤)');
        loadLobbyInfo();
      }
    }, 10000); // –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–æ 10 —Å–µ–∫—É–Ω–¥
    
    return () => clearInterval(forceLoadInterval);
  }, [game.id, players.length]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ª–æ–±–±–∏
  useEffect(() => {
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∏–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞
    if (currentGame.status === 'playing') {
      console.log('–ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      return;
    }

    const interval = setInterval(() => {
      console.log('üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–±–±–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      updateLobbyInfo();
    }, 2000); // –£–º–µ–Ω—å—à–∏–ª–∏ –¥–æ 2 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏

    return () => clearInterval(interval);
  }, [game.id, hasJoinedLobby, currentGame.status]);

  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–ø—Å–∞
  useEffect(() => {
    setCurrentGame(game);
  }, [game]);

  // SSE –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã
  useEffect(() => {
    let eventSource: EventSource | null = null;
    
    try {
      eventSource = new EventSource(`${API_BASE_URL}/events`);
      
      eventSource.addEventListener('game_started', (event) => {
        const data = JSON.parse(event.data);
        console.log('üöÄ –ü–æ–ª—É—á–µ–Ω–æ SSE —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã:', data);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –Ω–∞—à–µ–º—É –ª–æ–±–±–∏
        if (data.lobbyId === game.id) {
          console.log('üöÄ –ü–æ–ª—É—á–µ–Ω–æ SSE —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã:', data);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
          setCurrentGame(prev => ({ ...prev, status: 'playing' }));
          
          // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ UI
          setTimeout(() => {
            if (onStartGame) {
              onStartGame();
            }
          }, 100);
        }
      });
      
      eventSource.addEventListener('lobby_deleted', (event) => {
        const data = JSON.parse(event.data);
        console.log('üóëÔ∏è –ü–æ–ª—É—á–µ–Ω–æ SSE —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ–±–±–∏:', data);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –Ω–∞—à–µ–º—É –ª–æ–±–±–∏
         if (data.id === game.id) {
           console.log('üóëÔ∏è –õ–æ–±–±–∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É');
           
           // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
           if (onLeaveLobby) {
             onLeaveLobby();
           } else {
             onBack();
           }
         }
      });
      
      console.log('‚úÖ SSE –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ª–æ–±–±–∏:', game.id);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SSE:', error);
    }
    
    return () => {
      if (eventSource) {
        eventSource.close();
        console.log('üîå SSE –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –¥–ª—è –ª–æ–±–±–∏:', game.id);
      }
    };
  }, [game.id, onStartGame]);

  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã bottomSticky –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
  useEffect(() => {
    const measureBottomSticky = () => {
      if (bottomStickyRef.current) {
        const height = bottomStickyRef.current.getBoundingClientRect().height;
        document.documentElement.style.setProperty('--bottom-sticky-height', `${height}px`);
        console.log('üîß –ò–∑–º–µ—Ä–µ–Ω–∞ –≤—ã—Å–æ—Ç–∞ bottomSticky:', height + 'px');
      }
    };

    // –ò–∑–º–µ—Ä—è–µ–º —Å—Ä–∞–∑—É –∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    measureBottomSticky();
    
    // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
    const resizeObserver = new ResizeObserver(measureBottomSticky);
    if (bottomStickyRef.current) {
      resizeObserver.observe(bottomStickyRef.current);
    }

    // –¢–∞–∫–∂–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–∫–Ω–∞
    window.addEventListener('resize', measureBottomSticky);
    
    return () => {
      resizeObserver.disconnect();
      window.removeEventListener('resize', measureBottomSticky);
    };
  }, [players, currentGame, isLoading]); // –ü–µ—Ä–µ–º–µ—Ä—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ

  // –ü–æ–∫–∏–Ω—É—Ç—å –ª–æ–±–±–∏
  // Updated handleLeaveLobby to call /leave API
  const handleLeaveLobby = async () => {
    try {
      setIsLoading(true);
      
      // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
      webApp?.hapticFeedback.impactOccurred('medium');
      
      // API –≤—ã–∑–æ–≤ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ª–æ–±–±–∏
      const playerId = getCurrentUser()?.id?.toString() || `dev_${Date.now()}_${Math.floor(Math.random() * 1000)}`;
      await fetch(`${API_BASE_URL}/games/${game.id}/leave`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ playerId }),
      });
      
      // –û—á–∏—â–∞–µ–º localStorage –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ª–æ–±–±–∏
      const leavingUserId = playerId;
      const joinAttemptKey = `lobby_join_attempt_${game.id}_${leavingUserId}`;
      localStorage.removeItem(joinAttemptKey);
      
      console.log('–ü–æ–∫–∏–¥–∞–µ–º –ª–æ–±–±–∏:', game.id);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
      onBack();

      // NEW: –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–æ–±–±–∏ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏–µ storage,
      // —á—Ç–æ–±—ã –¥—Ä—É–≥–æ–π –∫–ª–∏–µ–Ω—Ç —É–≤–∏–¥–µ–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
      try {
        localStorage.setItem('lobbies_refresh_tick', `${Date.now()}`);
        // –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —É–¥–∞–ª—è–µ–º –∫–ª—é—á, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è —Ç–æ–∂–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
        localStorage.removeItem('lobbies_refresh_tick');
      } catch {}
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∏–¥–∞–Ω–∏–∏ –ª–æ–±–±–∏:', error);
      
      // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ–± –æ—à–∏–±–∫–µ
      webApp?.hapticFeedback.notificationOccurred('error');
      
      const errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∏–Ω—É—Ç—å –ª–æ–±–±–∏';
      webApp?.showConfirm(errorMessage) || alert(errorMessage);
    } finally {
      setIsLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞
  const handleToggleReady = async () => {
    try {
      setIsLoading(true);
      
      // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
      webApp?.hapticFeedback.selectionChanged();
      
      const newReadyState = !isReady;
      setIsReady(newReadyState);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      try {
        await fetch(`${API_BASE_URL}/games/${game.id}/ready`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            playerId: getCurrentUser()?.id?.toString() || `dev_${Date.now()}`,
            isReady: newReadyState,
          }),
        });
        
        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–±–±–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        console.log('üîÑ –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏');
        await updateLobbyInfo();
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        setTimeout(async () => {
          console.log('üîÑ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ª–æ–±–±–∏');
          await updateLobbyInfo();
        }, 500);
        
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ /ready:', err);
        setIsReady(!newReadyState); // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }
      console.log(`–ò–≥—Ä–æ–∫ ${newReadyState ? '–≥–æ—Ç–æ–≤' : '–Ω–µ –≥–æ—Ç–æ–≤'} –∫ –∏–≥—Ä–µ`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:', error);
      setIsReady(!isReady); // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    } finally {
      setIsLoading(false);
    }
  };

  // –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ —á–µ—Ä–µ–∑ Telegram
  const handleInviteFriend = () => {
    // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    webApp?.hapticFeedback.selectionChanged();
    
    const deepLink = buildStartAppJoinUrl(String(game.id));
    const shareText = `üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –∏–≥—Ä–µ –≤ –ö—É–±–∏–∫!\n\nüí∞ –°—Ç–∞–≤–∫–∞: ${currentGame.price} TON\nüë• –ò–≥—Ä–æ–∫–æ–≤: ${currentGame.currentPlayers}/${currentGame.maxPlayers}`;
    const shareUrl = buildShareUrl(deepLink, shareText);

    if (webApp?.openTelegramLink) {
      try {
        webApp.openTelegramLink(shareUrl);
        return;
      } catch {}
    }

    // –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π fallback: –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
    if (navigator.clipboard) {
      navigator.clipboard.writeText(deepLink).then(() => {
        webApp?.showAlert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –¥—Ä—É–≥—É –≤ Telegram.');
      }).catch(() => {
        webApp?.showAlert(`–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É:\n${deepLink}`);
      });
    }
  };



  const isCreator = currentGame.isMyGame;
  const isFull = currentGame.currentPlayers >= currentGame.maxPlayers;
  // –£–¥–∞–ª–µ–Ω–æ: const isCurrentUserInLobby = players.some(p => p.id === getCurrentUser()?.id?.toString());

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ (–∫—Ä–æ–º–µ —Å–æ–∑–¥–∞—Ç–µ–ª—è)
  const allPlayersReady = players.length >= 2 && players.every(player => 
    player.role === 'creator' || player.isReady === true
  );
  
  // –£–±—Ä–∞–Ω–æ: —Ä—É—á–Ω–æ–π —Å—Ç–∞—Ä—Ç –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –∞–≤—Ç–æ—Å—Ç–∞—Ä—Ç –ø—Ä–∏ allReady –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

  // –£–¥–∞–ª–µ–Ω–æ: handleManualJoin –∫–∞–∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π

  return (
    <div className={styles.lobbyContainer}>
      {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Å–µ–∫—Ü–∏—è —Å –∏–≥—Ä–æ–∫–∞–º–∏ */}
      <div className={styles.centerSection}>
        <h2 className={styles.sectionTitle}>
          {t('lobby.playersTitle', { current: currentGame.currentPlayers, max: currentGame.maxPlayers })}
        </h2>
        
        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞ */}
        {currentGame.currentPlayers < currentGame.maxPlayers && (
          <div className={styles.waitingText}>
            {currentGame.maxPlayers === 2
              ? t('lobby.waitingSecond')
              : t('lobby.waitingMore', { count: currentGame.maxPlayers - currentGame.currentPlayers })}
          </div>
        )}
        
        {/* –°—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è */}
        {isCreator && players.length >= 2 && (
          <div className={styles.readinessStatus}>
            <div className={`${styles.readinessIndicator} ${allPlayersReady ? styles.allReady : styles.waitingForPlayers}`}>
              {allPlayersReady ? (
                <>
                  <span className={styles.readinessIcon}></span>
                   <span className={styles.readinessText}>{t('lobby.allReady')}</span>
                </>
              ) : (
                <>
                  <span className={styles.readinessIcon}><FaHourglassHalf /></span>
                   <span className={styles.readinessText}>{t('lobby.waitingReady')}</span>
                </>
              )}
            </div>
          </div>
        )}
        
        {/* –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –ª–æ–±–±–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞ */}
        <div className={styles.playersList}>
          <h3 className={styles.playersListTitle}>{t('lobby.inLobby')}</h3>
          <div className={styles.playersListContainer}>
            {players.length > 0 ? (
              players.map((player) => {
                const isCurrentUser = player.id === getCurrentUser()?.id?.toString();
                return (
                  <div key={player.id} className={styles.playerListItem}>
                    <div className={styles.playerListAvatar}>
                      {getPlayerAvatar(player)}
                    </div>
                    <div className={styles.playerListInfo}>
                      <div className={styles.playerListName}>
                        {getPlayerName(player)}
                      </div>
                      {player.role === 'creator' && (
                         <div className={styles.playerListBadge}>{t('lobby.creator')}</div>
                      )}
                    </div>
                    <div className={styles.playerListStatus}>
                      {isCurrentUser && player.role !== 'creator' ? (
                        <button 
                          className={`${styles.readyButton} ${isReady ? styles.readyButtonActive : ''}`}
                          onClick={handleToggleReady}
                          disabled={isLoading}
                        >
                           {isReady ? t('lobby.ready') : t('lobby.areYouReady')}
                        </button>
                      ) : (
                        <span className={`${styles.statusText} ${
                          player.role === 'creator' ? styles.creatorStatus : 
                          player.isReady ? styles.readyStatus : styles.notReadyStatus
                        }`}>
                           {player.role === 'creator' ? '' : 
                           player.isReady ? t('lobby.ready') : t('lobby.notReady')}
                        </span>
                      )}
                    </div>
                  </div>
                );
              })
            ) : (
              <div className={styles.loadingPlayers}>
                <div className={styles.loadingText}>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä–æ–∫–æ–≤...</div>
              </div>
            )}
          </div>
        </div>
        
        {/* –ü—É—Å—Ç—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ */}
        {Array.from({ length: currentGame.maxPlayers - currentGame.currentPlayers }).map((_, index) => (
          <div key={`empty-${index}`} className={styles.emptySlotItem}>
            <div className={styles.emptySlotAvatar}>
              <div className={styles.dashedCircle}></div>
            </div>
            <div className={styles.emptySlotText}>
               {t('lobby.slotWaiting')}
            </div>
          </div>
        ))}

      </div>



      {/* –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–ª–æ–∫: –æ–ø–∏—Å–∞–Ω–∏–µ + –¥–µ–π—Å—Ç–≤–∏—è, –ø—Ä–∏–∂–∞—Ç –∫ –º–µ–Ω—é */}
      <div className={styles.bottomSticky} ref={bottomStickyRef}>
        <div className={styles.gameInfo}>
          <div className={styles.infoCard}>
            <div className={styles.infoRow}>
              <span className={styles.infoLabel}>{t('lobby.bet')}</span>
              <span className={styles.infoValue}>{currentGame.price} TON</span>
            </div>
            <div className={styles.infoRow}>
              <span className={styles.infoLabel}>{t('lobby.type')}</span>
              <span className={styles.infoValue}>
                {currentGame.type === '1v1' ? t('game.oneVsOne') : t('game.lobby')}
              </span>
            </div>
            <div className={styles.infoRow}>
              <span className={styles.infoLabel}>{t('lobby.privacy')}</span>
              <span className={styles.infoValue}>
                {currentGame.isPrivate ? t('lobby.privacyPrivate') : t('lobby.privacyPublic')}
              </span>
            </div>
            {currentGame.isAnonymous && (
              <div className={styles.infoRow}>
                <span className={styles.infoLabel}>{t('lobby.mode')}</span>
                <span className={styles.infoValue}>{t('lobby.modeAnonymous')}</span>
              </div>
            )}
          </div>
        </div>

        <div className={styles.actions}>
          {!isFull && (
            <button 
              className={styles.inviteButton}
              onClick={handleInviteFriend}
              disabled={isLoading}
            >
              <FaShareSquare /> {t('lobby.share')}
            </button>
          )}
          <button 
            className={styles.leaveButton}
            onClick={handleLeaveLobby}
          >
            {isLoading ? t('lobby.leaving') : <><FaDoorOpen /> {t('lobby.leave')}</>}
          </button>
        </div>
      </div>
      

      {/* –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {isLoading && (
        <div className={styles.loadingOverlay}>
          <div className={styles.loadingSpinner}><FaHourglassHalf /></div>
        </div>
      )}
    </div>
  );

  // –≠—Ñ—Ñ–µ–∫—Ç heartbeat: —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–Ω–ª–∞–π–Ω –≤ –ª–æ–±–±–∏
  useEffect(() => {
    const id = getCurrentUser()?.id?.toString();
    if (!id) return;
    const send = () => {
      fetch(`${API_BASE_URL}/games/${game.id}/heartbeat`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ playerId: id, screen: 'lobby' })
      }).catch(() => {});
    };
    send();
    const interval = setInterval(send, 5000);
    return () => clearInterval(interval);
  }, [game.id]);

  // –£–î–ê–õ–ï–ù–û: –∞–≤—Ç–æ-–≤—ã–∑–æ–≤ /leave –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  // –£–î–ê–õ–ï–ù–û: –æ—Ç–ø—Ä–∞–≤–∫–∞ /leave –≤ beforeunload ‚Äî –∏–≥—Ä–æ–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –≤ –ª–æ–±–±–∏ –ø–æ–∫–∞ —Å–∞–º–∏ –Ω–µ –≤—ã–π–¥—É—Ç
};


export default GameLobby;