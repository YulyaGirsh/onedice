import React, { useState, useEffect } from 'react';
import { Game } from '../../types';
import GameCard from '../../components/GameCard';
import { useLanguage } from '../../hooks/useLanguage';
import styles from './PlayPage.module.css';
import { FaDice } from 'react-icons/fa';
import { API_BASE_URL } from '../../config/api';

interface PlayPageProps {
  allGames: Game[];
  myGames: Game[];
  onJoinGame: (gameId: string) => void;
  onCreateGame: () => void;
  onDeleteLobby?: (gameId: string) => void;
  onRemoveLobby?: (gameId: string) => void;
  onRefreshLobbies?: () => void;
  onLoadAllLobbies?: () => void;
  onLoadMyLobbies?: () => void;
}

const PlayPage: React.FC<PlayPageProps> = ({
  allGames,
  myGames,
  onJoinGame,
  onCreateGame,
  onDeleteLobby,
  onRefreshLobbies,
  onLoadAllLobbies,
  onLoadMyLobbies,
  onRemoveLobby
}) => {
  const [gameFilter, setGameFilter] = useState<'all' | 'my'>('all');
  const [loadedTabs, setLoadedTabs] = useState<Set<string>>(new Set());
  const { t } = useLanguage();

  // NEW: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ª–æ–±–±–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–ª–∏)
  useEffect(() => {
    if (gameFilter === 'all' && onLoadAllLobbies && !loadedTabs.has('all')) {
      onLoadAllLobbies();
      setLoadedTabs(prev => new Set(prev).add('all'));
    } else if (gameFilter === 'my' && onLoadMyLobbies && !loadedTabs.has('my')) {
      onLoadMyLobbies();
      setLoadedTabs(prev => new Set(prev).add('my'));
    }
  }, [gameFilter, onLoadAllLobbies, onLoadMyLobbies, loadedTabs]);

  // SSE –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–±–µ–∑ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
  useEffect(() => {
    if (!onRefreshLobbies) return;

    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ storage –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const handleStorage = (e: StorageEvent) => {
      if (e.key === 'lobbies_refresh_tick') {
        onRefreshLobbies();
      }
    };
    window.addEventListener('storage', handleStorage);

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ SSE –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    let es: EventSource | null = null;
    try {
      es = new EventSource(`${API_BASE_URL}/events`);
      es.addEventListener('lobby_update', () => onRefreshLobbies());
      es.addEventListener('lobby_deleted', (event) => {
        const data = JSON.parse(event.data);
        console.log('üóëÔ∏è –ü–æ–ª—É—á–µ–Ω–æ SSE —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ–±–±–∏:', data);
        if (onRemoveLobby) onRemoveLobby(data.id);
      });
    } catch {}

    return () => {
      window.removeEventListener('storage', handleStorage);
      if (es) es.close();
    };
  }, [onRefreshLobbies]);

  // –§–∏–ª—å—Ç—Ä—É–µ–º –∏–≥—Ä—ã –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
  const filteredGames = gameFilter === 'all' ? allGames : myGames;

  return (
    <>
      {/* –§–∏–ª—å—Ç—Ä—ã –∏–≥—Ä */}
      <div className={styles.gameFilters}>
        <button
          className={`${styles.gameFilterBtn} ${gameFilter === 'all' ? styles.active : ''}`}
          onClick={() => setGameFilter('all')}
        >
          {t('game.filters.all')}
        </button>
        <button
          className={`${styles.gameFilterBtn} ${gameFilter === 'my' ? styles.active : ''}`}
          onClick={() => setGameFilter('my')}
        >
          {t('game.filters.my')}
        </button>
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–°–≤–æ–∏" - –≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω–∞ */}
      {gameFilter === 'my' && (
        <div className={styles.createGameSection}>
          <button className={styles.createGameBtnSecondary} onClick={onCreateGame}>
            {t('game.createNew')}
          </button>
        </div>
      )}

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç –∏–≥—Ä */}
      {gameFilter === 'my' && myGames.length === 0 ? (
        <div className={styles.emptyGames}>
          <div className={styles.emptyIcon}><FaDice /></div>
          <h3>{t('game.noGames')}</h3>
          <p>{t('game.createFirst')}</p>
        </div>
      ) : (
        <div className={styles.gamesGrid}>
          {filteredGames.map(game => (
            <GameCard
              key={game.id}
              game={game}
              onJoin={onJoinGame}
              onDelete={onDeleteLobby}
            />
          ))}
        </div>
      )}
    </>
  );
};

export default PlayPage;