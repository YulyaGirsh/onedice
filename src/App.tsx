import { useState, useEffect } from 'react';
import './App.css';
import ProfileHeader from './components/ProfileHeader/ProfileHeader';
import BottomNavigation from './components/BottomNavigation';
import CreateGameModal from './components/CreateGameModal';
import WelcomeModal from './components/WelcomeModal';
import DepositModal from './components/DepositModal/DepositModal';
import WithdrawModal from './components/WithdrawModal/WithdrawModal';
import SettingsModal from './components/SettingsModal/SettingsModal';
import PlayPage from './pages/PlayPage/PlayPage';
import RatingPage from './pages/RatingPage/RatingPage';
import React, { Suspense } from 'react';
const ProfilePage = React.lazy(() => import('./pages/ProfilePage/ProfilePage'));
const ShopPage = React.lazy(() => import('./pages/ShopPage/ShopPage'));
import SettingsPage from './pages/SettingsPage';
import { useTelegramWebApp } from './hooks/useTelegramWebApp';
import { useGameData } from './hooks/useGameData';
import { useClosingConfirmation } from './hooks/useClosingConfirmation';
import { useLanguage } from './hooks/useLanguage';
import { Game, PageType, Player } from './types';
import GameLobby from './pages/GameLobby/GameLobby';
import GamePlay from './components/GamePlay/GamePlay';
import { apiService } from './services/api';
import { API_BASE_URL } from './config/api';
import NotificationSystem from './components/NotificationSystem/NotificationSystem';
import { useNotifications } from './hooks/useNotifications';
import AvatarSelection from './components/AvatarSelection/AvatarSelection';

function App() {
  const { t } = useLanguage();
  const [currentPage, setCurrentPage] = useState<PageType>('play');
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π currentPage
  useEffect(() => {
    console.log('üîÑ Current page changed to:', currentPage);
  }, [currentPage]);
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [showWelcomeModal, setShowWelcomeModal] = useState(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞–ª–∞—Å—å –ª–∏ –∑–∞—Å—Ç–∞–≤–∫–∞ —Ä–∞–Ω–µ–µ
    const hasShownWelcome = localStorage.getItem('welcomeModalShown');
    return !hasShownWelcome;
  });
  const [, setWelcomeModalShown] = useState(false);
  const [showDepositModal, setShowDepositModal] = useState(false);
  const [showWithdrawModal, setShowWithdrawModal] = useState(false);
  const [showSettingsModal, setShowSettingsModal] = useState(false);
  const [viewingUserId, setViewingUserId] = useState<string | number | null>(null);
  
  const webApp = useTelegramWebApp();
  const { allGames, myGames, onJoinGame, createGame, deleteLobby, removeLobbyFromState, loadLobbies, loadMyLobbies, refreshLobbies } = useGameData();
  const [currentLobby, setCurrentLobby] = useState<Game | null>(null);
  const [isGameStarted, setIsGameStarted] = useState(false);
  const [currentPlayers, setCurrentPlayers] = useState<Player[]>([]);
  const [startParamHandled, setStartParamHandled] = useState<boolean>(false);
  const [showAvatarSelection, setShowAvatarSelection] = useState(false);
  const [isLoadingAvatar, setIsLoadingAvatar] = useState(true);
  const [isNewUser, setIsNewUser] = useState(false);
  
  // –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const { notifications, removeNotification, showPlayerLeft, showPlayerJoined } = useNotifications();

  // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
  useClosingConfirmation({
    enabled: true,
    message: t('common.confirmCloseWithProgress'),
    onConfirm: () => {
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–∫—Ä—ã—Ç–∏–µ Mini App');
    },
    onCancel: () => {
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫—Ä—ã—Ç–∏–µ Mini App');
    }
  });

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ª–æ–±–±–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  useEffect(() => {
    const initializeApp = async () => {
      try {
        const user = getCurrentUser();
        if (user) {
          const userData = {
            id: user.id.toString(),
            username: user.username || 'anonymous',
            first_name: user.first_name || '',
            last_name: user.last_name || ''
          };
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          try {
            const response = await fetch(`${API_BASE_URL}/users/${user.id}`);
            const userExists = response.ok;
            
            if (!userExists) {
              // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–æ–≤–æ–≥–æ
              await apiService.registerUser(userData);
              setIsNewUser(true);
              console.log('‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', userData);
            } else {
              console.log('‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', userData);
            }
            
            // –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
            if (!userExists) {
              try {
                const avatar = await apiService.getUserAvatar(user.id.toString());
                if (!avatar) {
                  // –ï—Å–ª–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏ –Ω–µ—Ç —É –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –ø–æ—Å–ª–µ welcome modal
                  // setShowAvatarSelection –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ true –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è welcome modal
                }
              } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏:', error);
              }
            }
            
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–≤—ã–º
            await apiService.registerUser(userData);
            setIsNewUser(true);
          }
          
          setIsLoadingAvatar(false);
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–±–±–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
          await refreshLobbies();
          console.log('‚úÖ –õ–æ–±–±–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
        setIsLoadingAvatar(false);
      }
    };

    initializeApp();
  }, [webApp, refreshLobbies]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ GameLobby)
  const getCurrentUser = () => {
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram WebApp
    if (webApp?.initDataUnsafe?.user) {
      return webApp.initDataUnsafe.user;
    }
    
    // Fallback –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    let developmentUserId = localStorage.getItem('development_user_id');
    if (!developmentUserId) {
      developmentUserId = `dev_${Date.now()}_${Math.floor(Math.random() * 1000)}`;
      localStorage.setItem('development_user_id', developmentUserId);
    }
    
    return {
      id: developmentUserId,
      first_name: '–î–∞–Ω–∏–ª',
      last_name: '–ë–µ—Ä–µ–∑–∏–Ω',
      username: 'danil_berezin'
    };
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ª–æ–±–±–∏ (–¥–ª—è onBack –≤ GameLobby)
  const handleLobbyBack = async () => {
    if (currentLobby) {
      try {
        const playerId = getCurrentUser()?.id?.toString() || `dev_${Date.now()}_${Math.floor(Math.random() * 1000)}`;
        await fetch(`${API_BASE_URL}/games/${currentLobby.id}/leave`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ playerId }),
        });
        
        // –û—á–∏—â–∞–µ–º localStorage –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ª–æ–±–±–∏
        const joinAttemptKey = `lobby_join_attempt_${currentLobby.id}_${playerId}`;
        localStorage.removeItem(joinAttemptKey);
        
        console.log('–ü–æ–∫–∏–¥–∞–µ–º –ª–æ–±–±–∏ —á–µ—Ä–µ–∑ onBack:', currentLobby.id);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∏–¥–∞–Ω–∏–∏ –ª–æ–±–±–∏ —á–µ—Ä–µ–∑ onBack:', error);
      }
    }
    
    setCurrentLobby(null);
    loadLobbies();
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏
  const handleAvatarSelect = async (avatar: string) => {
    try {
      const user = getCurrentUser();
      if (user) {
        await apiService.updateUserAvatar(user.id.toString(), avatar);
        console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', avatar);
        setShowAvatarSelection(false);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏:', error);
    }
  };

  const handleBackButtonClick = async () => {
    if (isGameStarted) {
      setIsGameStarted(false);
    } else if (currentLobby) {
      // –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è –ø–æ–∫–∏–¥–∞–Ω–∏—è –ª–æ–±–±–∏ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
      try {
        const playerId = getCurrentUser()?.id?.toString() || `dev_${Date.now()}_${Math.floor(Math.random() * 1000)}`;
        await fetch(`${API_BASE_URL}/games/${currentLobby.id}/leave`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ playerId }),
        });
        
        // –û—á–∏—â–∞–µ–º localStorage –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ª–æ–±–±–∏
        const joinAttemptKey = `lobby_join_attempt_${currentLobby.id}_${playerId}`;
        localStorage.removeItem(joinAttemptKey);
        
        console.log('–ü–æ–∫–∏–¥–∞–µ–º –ª–æ–±–±–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥:', currentLobby.id);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∏–¥–∞–Ω–∏–∏ –ª–æ–±–±–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥:', error);
      }
      
      setCurrentLobby(null);
      // –û–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ –ª–æ–±–±–∏ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞, —á—Ç–æ–±—ã –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤
      refreshLobbies();
    } else {
      setCurrentPage('play');
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π —á–µ—Ä–µ–∑ startapp –ø–∞—Ä–∞–º–µ—Ç—Ä
  useEffect(() => {
    const startParam = webApp?.initDataUnsafe?.start_param;
    if (!startParam || startParamHandled) return;
    setStartParamHandled(true);
    if (startParam.startsWith('join_')) {
      const gameIdString = startParam.replace('join_', '');
      const joinFlow = async (targetGameId: string) => {
        try {
          const updatedGame = await onJoinGame(targetGameId);
          if (updatedGame) setCurrentLobby(updatedGame);
        } catch (error) {
          const msg = error instanceof Error ? error.message : '';
          if (/–≥–æ—Ç–æ–≤–∞|–∑–∞–ø–æ–ª–Ω–µ–Ω–∞|ready|full/i.test(msg)) return;
          webApp?.showAlert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
      };
      const game = allGames.find((g: Game) => g.id === gameIdString) || myGames.find((g: Game) => g.id === gameIdString);
      if (game) {
        joinFlow(game.id);
      } else {
        // –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–±–±–∏ –ø–æ id —á–µ—Ä–µ–∑ onJoinGame ‚Äî –æ–Ω —Å–∞–º –ø–æ–¥—Ç—è–Ω–µ—Ç
        joinFlow(gameIdString);
      }
    }
  }, [webApp, startParamHandled, allGames, myGames, onJoinGame]);

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ BackButton –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    if (!webApp?.BackButton) return;

    if (currentPage === 'play' && !currentLobby && !isGameStarted) {
      webApp.BackButton.hide();
    } else {
      webApp.BackButton.show();
      webApp.BackButton.onClick(handleBackButtonClick);
    }

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (webApp?.BackButton) {
        webApp.BackButton.offClick(handleBackButtonClick);
      }
    };
  }, [currentPage, currentLobby, isGameStarted, webApp]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏ –≤ –ª–æ–±–±–∏
  useEffect(() => {
    const handleAppExit = async () => {
      if (currentLobby) {
        try {
          const playerId = getCurrentUser()?.id?.toString() || `dev_${Date.now()}_${Math.floor(Math.random() * 1000)}`;
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º navigator.sendBeacon –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
          const data = JSON.stringify({ playerId });
          const url = `${API_BASE_URL}/games/${currentLobby.id}/leave`;
          
          if (navigator.sendBeacon) {
            navigator.sendBeacon(url, data);
          } else {
            // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ sendBeacon
            await fetch(url, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: data,
              keepalive: true
            });
          }
          
          // –û—á–∏—â–∞–µ–º localStorage
          const joinAttemptKey = `lobby_join_attempt_${currentLobby.id}_${playerId}`;
          localStorage.removeItem(joinAttemptKey);
          
          console.log('–ü–æ–∫–∏–¥–∞–µ–º –ª–æ–±–±–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', currentLobby.id);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∏–¥–∞–Ω–∏–∏ –ª–æ–±–±–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
        }
      }
    };

    const handleVisibilityChange = () => {
      if (document.visibilityState === 'hidden') {
        handleAppExit();
      }
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è visibilitychange (–±–µ–∑ beforeunload —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞)
    document.addEventListener('visibilitychange', handleVisibilityChange);

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    };
  }, [currentLobby]);

  const handleCreateGame = async (gameData: any) => {
    const createdGame = await createGame(gameData);
    if (createdGame) {
      setIsCreateModalOpen(false);
      setCurrentLobby(createdGame);
    }
  };

  const handleJoinGame = async (gameId: string) => {
    const updatedGame = await onJoinGame(gameId).catch((e) => { throw e; });
    if (updatedGame) setCurrentLobby(updatedGame);
    return updatedGame;
  };

  const getAppContainerClass = () => {
    if (isGameStarted) return 'app-container game-mode';
    if (currentLobby) return 'app-container lobby-mode';
    return 'app-container';
  };

  const getMainContentClass = () => {
    if (isGameStarted) return 'main-content game-content';
    if (currentLobby) return 'main-content lobby-content';
    return 'main-content';
  };

  const renderCurrentPage = () => {
    if (isGameStarted && currentLobby) {
      return (
        <GamePlay
          game={currentLobby}
          players={currentPlayers}
          onBackToLobby={() => {
            setIsGameStarted(false);
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–≥—Ä—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç—É—Å–∞ "–Ω–µ –≥–æ—Ç–æ–≤"
            localStorage.setItem(`exit_from_game_${currentLobby.id}`, Date.now().toString());
          }}
          onPlayAgain={() => {
            // –æ—Å—Ç–∞–≤–∏—Ç—å –≤ GamePlay
          }}
          onPlayerLeft={showPlayerLeft}
        />
      );
    }

    if (currentLobby) {
      return (
        <GameLobby
          game={currentLobby}
          onBack={handleLobbyBack}
          onStartGame={() => setIsGameStarted(true)}
          onJoinGame={handleJoinGame}
          onPlayersUpdate={(players) => setCurrentPlayers(players)}
          onPlayerLeft={showPlayerLeft}
          onPlayerJoined={showPlayerJoined}
        />
      );
    }

    switch (currentPage) {
      case 'play':
        return (
        <PlayPage
          allGames={allGames}
          myGames={myGames}
          onJoinGame={handleJoinGame}
          onCreateGame={() => setIsCreateModalOpen(true)}
          onDeleteLobby={deleteLobby}
          onRemoveLobby={removeLobbyFromState}
          onRefreshLobbies={refreshLobbies}
          onLoadAllLobbies={loadLobbies}
          onLoadMyLobbies={loadMyLobbies}
        />
      );
      case 'rating':
        return (
          <RatingPage 
            onOpenUserProfile={(userId) => { 
              setViewingUserId(userId); 
              setCurrentPage('profile'); 
            }}
          />
        );
      case 'shop':
        return (
          <Suspense fallback={<div />}> 
            <ShopPage />
          </Suspense>
        );
      case 'profile':
        return (
          <Suspense fallback={<div />}> 
            <ProfilePage userId={viewingUserId} />
          </Suspense>
        );
      case 'settings':
        return <SettingsPage />;
      default:
        return <PlayPage allGames={allGames} myGames={myGames} onJoinGame={handleJoinGame} onCreateGame={() => setIsCreateModalOpen(true)} onDeleteLobby={deleteLobby} onRefreshLobbies={refreshLobbies} onLoadAllLobbies={loadLobbies} onLoadMyLobbies={loadMyLobbies} />;
    }
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ welcome modal)
  if (showAvatarSelection && !isLoadingAvatar && !showWelcomeModal) {
    return (
      <div className={getAppContainerClass()}>
        <AvatarSelection 
          onAvatarSelect={handleAvatarSelect} 
          user={getCurrentUser()}
        />
      </div>
    );
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É, –ø–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
  if (isLoadingAvatar) {
    return (
      <div className={getAppContainerClass()}>
        <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>
          <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>
        </div>
      </div>
    );
  }

  return (
    <div className={getAppContainerClass()}>
      {!isGameStarted && (
        <ProfileHeader 
          user={webApp?.initDataUnsafe?.user}
          onDepositClick={() => setShowDepositModal(true)}
          onSettingsClick={() => setShowSettingsModal(true)}
        />
      )}
      
      <main className={getMainContentClass()}>
        {renderCurrentPage()}
      </main>

      {!isGameStarted && !currentLobby && (
        <BottomNavigation 
          currentPage={currentPage} 
          setCurrentPage={setCurrentPage} 
        />
      )}

      <CreateGameModal
        isOpen={isCreateModalOpen}
        onClose={() => setIsCreateModalOpen(false)}
        onCreate={handleCreateGame}
      />

      <WelcomeModal
        visible={showWelcomeModal}
        onClose={() => {
          console.log('üéâ Welcome modal closed, ensuring page is "play"');
          setShowWelcomeModal(false);
          setWelcomeModalShown(true);
          // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Å—Ç–∞–µ—Ç—Å—è 'play'
          setCurrentPage('play');
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage, —á—Ç–æ –∑–∞—Å—Ç–∞–≤–∫–∞ –±—ã–ª–∞ –ø–æ–∫–∞–∑–∞–Ω–∞
          localStorage.setItem('welcomeModalShown', 'true');
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∞–≤–∞—Ç–∞—Ä–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          if (isNewUser) {
            setShowAvatarSelection(true);
          }
        }}
      />

      <DepositModal
        visible={showDepositModal}
        onClose={() => setShowDepositModal(false)}
      />

      <WithdrawModal
        visible={showWithdrawModal}
        onClose={() => setShowWithdrawModal(false)}
      />

      <SettingsModal
        visible={showSettingsModal}
        onClose={() => setShowSettingsModal(false)}
        onDepositClick={() => setShowDepositModal(true)}
        onWithdrawClick={() => setShowWithdrawModal(true)}
      />
      
      {/* –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
      <NotificationSystem
        notifications={notifications}
        onRemove={removeNotification}
      />
    </div>
  );
}

export default App;