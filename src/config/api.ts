// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
// –í dev –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ (–ø—Ä–æ–∫—Å–∏ Vite). –í –ø—Ä–æ–¥–µ (Telegram/—Ö–æ—Å—Ç–∏–Ω–≥) –Ω—É–∂–µ–Ω –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –±—ç–∫–µ–Ω–¥–∞.
export const API_BASE_URL = (() => {
  const envBase = (import.meta as any)?.env?.VITE_API_BASE_URL as string | undefined;
  const hostname = typeof window !== 'undefined' ? window.location.hostname : '';
  const isLocalhost = /^(localhost|127\.0\.0\.1|192\.168\.|10\.|172\.(1[6-9]|2\d|3[0-1])\.)$/.test(hostname);

  if (isLocalhost) {
    // –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ Vite
    return '';
  }

  // –ü—Ä–æ–¥/Telegram ‚Äî —Å–Ω–∞—á–∞–ª–∞ –±–µ—Ä—ë–º –∏–∑ env, –∏–Ω–∞—á–µ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–ª–∏ localStorage
  if (envBase) return envBase;
  try { const globalBase = (window as any).__API_BASE_URL__; if (typeof globalBase === 'string' && globalBase) return globalBase; } catch {}
  try { const saved = localStorage.getItem('api_base_url'); if (saved) return saved; } catch {}
  return '';
})();

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
const isDevelopment = typeof window !== 'undefined' && (/^(localhost|127\.0\.0\.1)$/.test(window.location.hostname));

interface ApiConfig {
  baseURL: string;
  timeout: number;
  headers: Record<string, string>;
}

// üîß –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API
const createApiConfig = (): ApiConfig => {
  const headers: Record<string, string> = {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
  };

  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ Telegram Web App –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
  if (window.Telegram?.WebApp) {
    const webApp = window.Telegram.WebApp;
    
    // –î–æ–±–∞–≤–ª—è–µ–º initDataUnsafe –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    if (webApp.initDataUnsafe) {
      headers['X-Telegram-Init-Data'] = JSON.stringify(webApp.initDataUnsafe);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
    headers['X-Telegram-Platform'] = webApp.platform || 'unknown';
    headers['X-Telegram-Version'] = webApp.version || 'unknown';
  }

  return {
    baseURL: API_BASE_URL,
    timeout: 10000, // 10 —Å–µ–∫—É–Ω–¥
    headers,
  };
};

// üì° API endpoints
export const API_ENDPOINTS = {
  // üéÆ –ò–≥—Ä–æ–≤—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
  games: {
    list: '/games',
    create: '/games',
    join: (gameId: string) => `/games/${gameId}/join`,
    leave: (gameId: string) => `/games/${gameId}/leave`,
    details: (gameId: string) => `/games/${gameId}`,
  },
  
  // üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
  user: {
    profile: '/user/profile',
    stats: '/user/stats',
    history: '/user/history',
    leaderboard: '/user/leaderboard',
    avatar: (userId: string) => `/users/${userId}/avatar`,
    updateAvatar: (userId: string) => `/users/${userId}/avatar`,
  },
  
  // üè™ –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞
  shop: {
    items: '/shop/items',
    purchase: '/shop/purchase',
    inventory: '/user/inventory',
  },
  
  // üéØ –°–∏—Å—Ç–µ–º–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
  system: {
    health: '/health',
    version: '/version',
    config: '/config',
  }
} as const;

// üîë –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export const getDefaultHeaders = () => {
  const headers: Record<string, string> = {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
  };

  // üé´ –î–æ–±–∞–≤–ª—è–µ–º Telegram Web App –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
  if (window.Telegram?.WebApp?.initDataUnsafe) {
    headers['X-Telegram-Init-Data'] = JSON.stringify(window.Telegram.WebApp.initDataUnsafe);
  }

  // üì± –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
  if (window.Telegram?.WebApp?.platform) {
    headers['X-Platform'] = window.Telegram.WebApp.platform;
  }

  return headers;
};

// üîÑ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
export const retryRequest = async <T>(
  requestFn: () => Promise<T>,
  retries: number = 3,
  delay: number = 1000
): Promise<T> => {
  try {
    return await requestFn();
  } catch (error) {
    if (retries > 0) {
      console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${delay}ms. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${retries}`);
      await new Promise(resolve => setTimeout(resolve, delay));
      return retryRequest(requestFn, retries - 1, delay * 1.5); // Exponential backoff
    }
    throw error;
  }
};

// üì° –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
export const apiRequest = async <T>(
  endpoint: string,
  options: RequestInit = {}
): Promise<T> => {
  const url = `${API_BASE_URL}${endpoint}`;
  
  const defaultOptions: RequestInit = {
    headers: getDefaultHeaders(),
  };

  const finalOptions = {
    ...defaultOptions,
    ...options,
    headers: {
      ...defaultOptions.headers,
      ...options.headers,
    },
  };

  try {
    const response = await fetch(url, finalOptions);
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error('API request failed:', error);
    throw error;
  }
};

// üéØ –£–¥–æ–±–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
export const api = {
  get: <T>(endpoint: string) => 
    apiRequest<T>(endpoint, { method: 'GET' }),
    
  post: <T>(endpoint: string, data?: any) =>
    apiRequest<T>(endpoint, {
      method: 'POST',
      body: data ? JSON.stringify(data) : undefined,
    }),
    
  put: <T>(endpoint: string, data?: any) =>
    apiRequest<T>(endpoint, {
      method: 'PUT',
      body: data ? JSON.stringify(data) : undefined,
    }),
    
  patch: <T>(endpoint: string, data?: any) =>
    apiRequest<T>(endpoint, {
      method: 'PATCH',
      body: data ? JSON.stringify(data) : undefined,
    }),
    
  delete: <T>(endpoint: string) =>
    apiRequest<T>(endpoint, { method: 'DELETE' }),
};

// üîß –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
export default createApiConfig();

// üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
console.log('üöÄ API Configuration:', {
  environment: isDevelopment ? 'development' : 'production',
  baseUrl: API_BASE_URL,
  timeout: 10000, // 10 —Å–µ–∫—É–Ω–¥
  retries: 3,
});