require('dotenv').config();
const express = require('express');
const cors = require('cors');
const { v4: uuidv4 } = require('uuid');
const { userQueries, lobbyQueries, gameQueries } = require('./database');

const app = express();
const PORT = process.env.PORT || 4000;

app.use(cors());
app.use(express.json());

// In-memory lobby store
const lobbies = new Map();

// --- SSE: –∫–ª–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ---
const sseClients = new Set();
function sseBroadcast(event, payload) {
  const data = `event: ${event}\n` + `data: ${JSON.stringify(payload)}\n\n`;
  for (const res of sseClients) {
    try { res.write(data); } catch (_) {}
  }
}

app.get('/events', (req, res) => {
  res.setHeader('Content-Type', 'text/event-stream');
  res.setHeader('Cache-Control', 'no-cache');
  res.setHeader('Connection', 'keep-alive');
  res.flushHeaders?.();
  res.write(': connected\n\n');
  sseClients.add(res);
  const keepAlive = setInterval(() => { try { res.write(': ping\n\n'); } catch {} }, 25000);
  req.on('close', () => { clearInterval(keepAlive); sseClients.delete(res); });
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–±–±–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
async function loadLobbiesFromDatabase() {
  try {
    console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–±–±–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    const dbLobbies = await lobbyQueries.getAllLobbiesWithPlayers();
    
    dbLobbies.forEach(lobby => {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –ë–î, —Ñ–æ—Ä–º–∏—Ä—É—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ displayName
      lobby.players = lobby.players.map(player => {
        const displayName = player.first_name && player.last_name 
          ? `${player.first_name} ${player.last_name}`.trim()
          : player.telegramUsername || 'anonymous';
        
        return {
          ...player,
          username: displayName
        };
      });
      lobbies.set(lobby.id, lobby);
    });
    
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${dbLobbies.length} –ª–æ–±–±–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–±–±–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app.post('/users/register', async (req, res) => {
  console.log('üë§ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.body);
  try {
    const { id, username, first_name, last_name } = req.body;
    if (!id) {
      return res.status(400).json({ error: 'User ID is required' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await userQueries.getUser(id);
    if (existingUser) {
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      return res.json({ message: 'User already exists', user: existingUser });
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await userQueries.upsertUser(id, first_name || null, last_name || null, username || null);
    const newUser = await userQueries.getUser(id);
    
    console.log(`‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${id}`);
    res.json({ message: 'User registered successfully', user: newUser });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({ error: 'Failed to register user' });
  }
});

// –£—Ç–∏–ª–∏—Ç–∞: —Ç–æ–ª—å–∫–æ –ø–æ–º–µ—Ç–∏—Ç—å –æ—Ñ—Ñ–ª–∞–π–Ω/–æ–Ω–ª–∞–π–Ω –ø–æ lastSeen ‚Äî –Ω–∏–∫–æ–≥–æ –Ω–µ —É–¥–∞–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
function purgeOfflinePlayers(lobby) {
  if (!lobby) return false;
  const now = Date.now();
  lobby.players.forEach(p => {
    const lastActive = p.lastSeen || p.joinedAt || 0;
    const isOffline = now - lastActive > 15000;
    p.online = !isOffline;
  });
  // –ù–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª—è–µ–º ‚Äî –∞–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ
  return false;
}

/**
 * –°–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏
 * body: { creator: { id, username }, type: 'duel' | 'lobby', bet: number, isPublic: boolean }
 */
app.post('/games', async (req, res) => {
  console.log(`üéØ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ–±–±–∏:`, req.body);
  try {
    const { creator, type = 'duel', bet = 0, isPublic = false, openProfile = false } = req.body || {};
    if (!creator || !creator.id) {
      console.log(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞—Ç–µ–ª—è:`, req.body);
      return res.status(400).json({ error: 'creator required' });
    }

    // 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)
    const existingUser = await userQueries.getUser(creator.id);
    if (!existingUser) {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${creator.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.`);
      return res.status(400).json({ error: 'User not registered. Please restart the app.' });
    }

    // 2) Create lobby in memory (for runtime operations)
    const id = uuidv4();
    const lobby = {
      id,
      type,
      bet,
      isPublic,
      openProfile,
      creatorId: creator.id,
      creatorFirstName: creator.first_name || null,
      creatorLastName: creator.last_name || null,
      players: [{ ...creator, role: 'creator', joinedAt: Date.now() }],
      maxPlayers: type === 'duel' ? 2 : 5,
      createdAt: Date.now(),
      status: 'waiting'
    };
    lobbies.set(id, lobby);

    // 3) Persist lobby + creator membership in SQLite
    await lobbyQueries.createLobby({
      id,
      creator_id: creator.id,
      type,
      bet,
      is_public: isPublic,
      open_profile: openProfile,
      max_players: lobby.maxPlayers,
      creator_first_name: creator.first_name || null,
      creator_last_name: creator.last_name || null,
    });

    console.log(`‚úÖ –õ–æ–±–±–∏ —Å–æ–∑–¥–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î:`, lobby);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ª–æ–±–±–∏ —á–µ—Ä–µ–∑ SSE
    sseBroadcast('lobby_update', { 
      id: lobby.id, 
      currentPlayers: lobby.players.length, 
      status: lobby.status,
      action: 'created'
    });
    
    return res.status(201).json(lobby);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–±–±–∏:', err);
    return res.status(500).json({ error: 'internal error' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–æ–±–±–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ)
app.get('/games', async (req, res) => {
  console.log(`GET /games called with query: ${JSON.stringify(req.query)}`);
  try {
    const publicOnly = req.query.public === 'true';

    // 1) –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ë–î, —á—Ç–æ–±—ã –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –≤–∏–¥–µ–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
    const dbLobbies = await lobbyQueries.getAllLobbiesWithPlayers();
    dbLobbies.forEach(dbLobby => {
      const existing = lobbies.get(dbLobby.id);
      if (existing) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Å–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è—è —Ä–∞–Ω—Ç–∞–π–º-–ø–æ–ª—è (lastSeen, screen)
        existing.type = dbLobby.type;
        existing.bet = dbLobby.bet;
        existing.isPublic = dbLobby.isPublic;
        existing.openProfile = dbLobby.openProfile;
        existing.creatorId = dbLobby.creatorId;
        existing.creatorFirstName = dbLobby.creatorFirstName || null;
        existing.creatorLastName = dbLobby.creatorLastName || null;
        existing.maxPlayers = dbLobby.maxPlayers;
        existing.status = dbLobby.status;
        existing.createdAt = dbLobby.createdAt;

        const runtimeById = new Map((existing.players || []).map(p => [p.id, p]));
        existing.players = (dbLobby.players || []).map(p => {
          const rt = runtimeById.get(p.id) || {};
          return {
            ...p,
            lastSeen: rt.lastSeen || p.joinedAt,
            online: typeof rt.online === 'boolean' ? rt.online : true,
            screen: rt.screen
          };
        });
      } else {
        lobbies.set(dbLobby.id, dbLobby);
      }
    });

    // 2) –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ –ø–∞–º—è—Ç–∏ (–ø–æ—Å–ª–µ —Å–∏–Ω–∫–∞), —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞ –ø—É–±–ª–∏—á–Ω–æ—Å—Ç–∏
    const list = Array.from(lobbies.values()).filter(l => !publicOnly || l.isPublic);

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–Ω–ª–∞–π–Ω-—Ñ–ª–∞–≥–∏ (–±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è)
    list.forEach(lobby => purgeOfflinePlayers(lobby));

    res.json(list);
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ª–æ–±–±–∏:', e);
    res.status(500).json({ error: 'internal error' });
  }
});

// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ª–æ–±–±–∏
app.post('/games/:id/join', async (req, res) => {
  console.log(`üéÆ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –ª–æ–±–±–∏ ${req.params.id}:`, req.body);
  
  const lobby = lobbies.get(req.params.id);
  if (!lobby) {
    console.log(`‚ùå –õ–æ–±–±–∏ ${req.params.id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
    return res.status(404).json({ error: 'not found' });
  }

  const { player } = req.body || {};
  if (!player || !player.id) {
    console.log(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞:`, req.body);
    return res.status(400).json({ error: 'player required' });
  }
  
  // –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  if (lobby.players.find(p => p.id === player.id)) {
    console.log(`‚ö†Ô∏è –ò–≥—Ä–æ–∫ ${player.id} —É–∂–µ –≤ –ª–æ–±–±–∏ ${req.params.id}`);
    return res.json(lobby);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –¢–û–õ–¨–ö–û –¥–ª—è –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
  if (lobby.players.length >= lobby.maxPlayers) {
    console.log(`‚ùå –õ–æ–±–±–∏ ${req.params.id} –∑–∞–ø–æ–ª–Ω–µ–Ω–æ (${lobby.players.length}/${lobby.maxPlayers})`);
    return res.status(400).json({ error: 'lobby full' });
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å (–µ—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª—å ‚Äî —Ä–æ–ª—å creator)
  const role = player.id === lobby.creatorId ? 'creator' : 'player';

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è first_name, last_name –∏ telegramUsername
  const firstName = player.first_name || null;
  const lastName = player.last_name || null;
  const telegramUsername = player.telegramUsername || null;
  
  console.log(`üîç –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ ${player.id}:`, {
    firstName,
    lastName,
    telegramUsername,
    originalPlayer: player
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –ë–î
  let userFromDb = null;
  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    await userQueries.upsertUser(player.id, firstName, lastName, telegramUsername);
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    userFromDb = await userQueries.getUser(player.id);
    
    // persist membership
    await lobbyQueries.addPlayerToLobby(req.params.id, player.id, role);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –≤ –ë–î:', err);
  }

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º username –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const displayName = userFromDb?.username || 'anonymous';
  
  const playerWithDisplayName = { ...player, username: displayName, role, joinedAt: Date.now() };
  
  console.log(`üìù –ò–≥—Ä–æ–∫ ${player.id} –ø–æ–ª—É—á–∏–ª username –∏–∑ –ë–î: "${displayName}"`);

  lobby.players.push(playerWithDisplayName);
  if (lobby.players.length === lobby.maxPlayers) lobby.status = 'ready';
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –≤—ã—à–µ–¥—à–µ–º
  lobby.lastPlayerLeft = null;
  
  const playerDisplayName = `${player.first_name || ''} ${player.last_name || ''}`.trim() || player.username || '–ò–≥—Ä–æ–∫';
  console.log(`‚úÖ –ò–≥—Ä–æ–∫ ${player.id} (${playerDisplayName}) –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –ª–æ–±–±–∏ ${req.params.id}`);
  console.log(`üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–±–±–∏:`, lobby);
  // –†–µ–∞–ª-—Ç–∞–π–º: —Å–æ–æ–±—â–∞–µ–º –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–æ–±–±–∏
  sseBroadcast('lobby_update', { id: lobby.id, currentPlayers: lobby.players.length, status: lobby.status });
  
  res.json(lobby);
});

// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
app.post('/games/:id/ready', async (req, res) => {
  const lobby = lobbies.get(req.params.id);
  if (!lobby) return res.status(404).json({ error: 'not found' });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–Ω–ª–∞–π–Ω-—Ñ–ª–∞–≥–∏ (–±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è)
  purgeOfflinePlayers(lobby);
  
  const { playerId, isReady } = req.body;
  if (!playerId) return res.status(400).json({ error: 'playerId required' });
  
  const player = lobby.players.find(p => p.id === playerId);
  if (!player) return res.status(400).json({ error: 'player not found' });

  // –°–æ–∑–¥–∞—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤, –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ —Å—Ç–∞—Ç—É—Å
  if (player.role === 'creator') {
    player.isReady = true;
  } else {
    player.isReady = isReady;
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  try {
    const finalReadyStatus = player.role === 'creator' ? true : isReady;
    await lobbyQueries.updatePlayerReady(req.params.id, playerId, finalReadyStatus);
    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId}: ${finalReadyStatus}`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤ –ë–î:`, error);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –≥–æ—Ç–æ–≤—ã (—Å–æ–∑–¥–∞—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤)
  const allReady = lobby.players.every(p => p.isReady || p.role === 'creator');

  // –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã –µ—Å–ª–∏ –≤—Å–µ –≥–æ—Ç–æ–≤—ã –∏ –ª–æ–±–±–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
  if (lobby.status !== 'playing' && lobby.players.length === lobby.maxPlayers && allReady) {
    lobby.status = 'playing';
    // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥–∏ "–∏–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞" –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    delete lobby.playAgainDeclinedBy;
    delete lobby.playAgainInitiator;
    delete lobby.shouldClearDeclineState;
    
    console.log(`üöÄ –ò–≥—Ä–∞ –≤ –ª–æ–±–±–∏ ${req.params.id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—â–µ–Ω–∞!`);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
    sseBroadcast('lobby-updated', lobby);
  } else if (lobby.status !== 'playing') {
    lobby.status = lobby.players.length === lobby.maxPlayers && allReady ? 'ready' : 'waiting';
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  const newStatus = lobby.status;
  lobbyQueries.updateLobbyStatus(req.params.id, newStatus).catch(e => console.error('DB status update error:', e));
  
  res.json(lobby);
});

// Heartbeat –¥–ª—è –æ–Ω–ª–∞–π–Ω–∞
app.post('/games/:id/heartbeat', (req, res) => {
  const lobby = lobbies.get(req.params.id);
  if (!lobby) return res.status(404).json({ error: 'not found' });
  const { playerId, screen } = req.body || {};
  if (!playerId) return res.status(400).json({ error: 'playerId required' });
  const player = lobby.players.find(p => p.id === playerId);
  if (!player) return res.status(400).json({ error: 'player not found' });
  player.lastSeen = Date.now();
  player.online = true;
  if (screen === 'game' || screen === 'lobby') player.screen = screen;
  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
  try {
    userQueries.updateLastSeen(player.id).catch(() => {});
  } catch {}
  res.json({ ok: true });
});

// –ü–æ–∫–∏–Ω—É—Ç—å –ª–æ–±–±–∏
app.post('/games/:id/leave', async (req, res) => {
  const lobby = lobbies.get(req.params.id);
  if (!lobby) return res.status(404).json({ error: 'not found' });
  const { playerId } = req.body || {};
  if (!playerId) return res.status(400).json({ error: 'playerId required' });
  
  // –£–¥–∞–ª—è–µ–º –≤ –ø–∞–º—è—Ç–∏
  const removedPlayer = lobby.players.find(p => p.id === playerId);
  lobby.players = lobby.players.filter(p => p.id !== playerId);
  
  // –ü–æ–º–µ—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ –∫–∞–∫ –ø–æ–∫–∏–Ω—É–≤—à–µ–≥–æ –≤ –ë–î
  let dbDeleteResult = null;
  try {
    dbDeleteResult = await lobbyQueries.removePlayerFromLobby(req.params.id, playerId);
  } catch (e) {
    console.error('DB remove player error:', e);
  }
  
  // –£–¥–∞–ª—è–µ–º –∏–∑ playAgain, –µ—Å–ª–∏ –±—ã–ª
  if (lobby.playAgain && lobby.playAgain instanceof Set) {
    lobby.playAgain.delete(playerId);
  }
  if (removedPlayer) {
    const playerDisplayName = `${removedPlayer.first_name || ''} ${removedPlayer.last_name || ''}`.trim() || removedPlayer.username || '–ò–≥—Ä–æ–∫';
    lobby.lastPlayerLeft = { id: removedPlayer.id, username: playerDisplayName };
  }
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ë–î
  if (dbDeleteResult && dbDeleteResult.deletedIds && dbDeleteResult.deletedIds.length > 0) {
    dbDeleteResult.deletedIds.forEach(deletedLobbyId => {
      if (lobbies.has(deletedLobbyId)) {
        lobbies.delete(deletedLobbyId);
        console.log(`üóëÔ∏è –õ–æ–±–±–∏ ${deletedLobbyId} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –ë–î –∏ –ø–∞–º—è—Ç–∏`);
        sseBroadcast('lobby_deleted', { id: deletedLobbyId });
      }
    });
    
    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –ª–æ–±–±–∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç
    if (dbDeleteResult.deletedIds.includes(req.params.id)) {
      return res.json({ deleted: true, message: 'Empty lobby deleted' });
    }
  }
  
  // –ï—Å–ª–∏ –≤ –ª–æ–±–±–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å ‚Äî —É–¥–∞–ª—è–µ–º –µ–≥–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
  if (lobby.players.length === 0) {
    try {
      const deleteResult = await lobbyQueries.deleteEmptyLobbies();
      if (deleteResult.deletedIds.includes(req.params.id)) {
        // –õ–æ–±–±–∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –ë–î, —É–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
        lobbies.delete(req.params.id);
        console.log(`üóëÔ∏è –ü—É—Å—Ç–æ–µ –ª–æ–±–±–∏ ${req.params.id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–æ`);
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ–±–±–∏
        sseBroadcast('lobby_deleted', { id: req.params.id });
        return res.json({ deleted: true, message: 'Empty lobby deleted' });
      }
    } catch (e) {
      console.error('Error deleting empty lobby:', e);
    }
    
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    lobby.status = 'waiting';
    lobbyQueries.updateLobbyStatus(req.params.id, 'waiting').catch(e => console.error('DB status update error:', e));
    sseBroadcast('lobby_update', { id: lobby.id, currentPlayers: lobby.players.length, status: lobby.status });
    return res.json(lobby);
  }
  
  // –ü—Ä–∏ –≤—ã—Ö–æ–¥–µ –∫–æ–≥–æ-–ª–∏–±–æ ‚Äî –ª–æ–±–±–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –æ–∂–∏–¥–∞–Ω–∏–µ
  lobby.status = 'waiting';
  lobbyQueries.updateLobbyStatus(req.params.id, 'waiting').catch(e => console.error('DB status update error:', e));
  sseBroadcast('lobby_update', { id: lobby.id, currentPlayers: lobby.players.length, status: lobby.status });
  res.json(lobby);
});

// –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ª–æ–±–±–∏
app.get('/games/:id', async (req, res) => {
  let lobby = lobbies.get(req.params.id);

  // –ï—Å–ª–∏ –≤ –ø–∞–º—è—Ç–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ–±—É–µ–º –¥–æ—Å—Ç–∞—Ç—å –∏–∑ –ë–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞)
  if (!lobby) {
    try {
      const dbLobbies = await lobbyQueries.getAllLobbiesWithPlayers();
      lobby = dbLobbies.find(l => l.id === req.params.id);
      if (lobby) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –ë–î, –∏—Å–ø–æ–ª—å–∑—É—è username –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        lobby.players = lobby.players.map(player => {
          return {
            ...player,
            username: player.username || 'anonymous' // –ò—Å–ø–æ–ª—å–∑—É–µ–º username –∏–∑ –ë–î
          };
        });
        lobbies.set(lobby.id, lobby);
      }
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–±–±–∏ –∏–∑ –ë–î:', e);
    }
  }

  if (!lobby) return res.status(404).json({ error: 'not found' });

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–Ω–ª–∞–π–Ω –ø–æ lastSeen (—Ç–∞–π–º–∞—É—Ç 12 —Å–µ–∫—É–Ω–¥)
  const now = Date.now();
  lobby.players.forEach(p => {
    if (p.lastSeen) {
      p.online = now - p.lastSeen <= 12000;
    }
    // –ù–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –≤ —ç–∫—Ä–∞–Ω–µ –∏–≥—Ä—ã —Å–µ–π—á–∞—Å
    p.inGame = p.online && p.screen === 'game';
  });

  // –ü–µ—Ä–µ–¥ –æ—Ç–¥–∞—á–µ–π ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –æ–Ω–ª–∞–π–Ω-—Ñ–ª–∞–≥–∏ (–±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è)
  purgeOfflinePlayers(lobby);

  res.json(lobby);
});

// –£–¥–∞–ª–µ–Ω–∏–µ –ª–æ–±–±–∏ (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å)
app.delete('/games/:id', async (req, res) => {
  console.log('üóëÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ª–æ–±–±–∏:', req.params.id, 'Body:', req.body);
  
  const lobby = lobbies.get(req.params.id);
  if (!lobby) {
    console.log('‚ùå –õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:', req.params.id);
    return res.status(404).json({ error: 'not found' });
  }
  
  const { playerId } = req.body || {};
  console.log('üë§ –ó–∞–ø—Ä–æ—Å –æ—Ç –∏–≥—Ä–æ–∫–∞:', playerId);
  console.log('üëë –°–æ–∑–¥–∞—Ç–µ–ª—å –ª–æ–±–±–∏ (creatorId):', lobby.creatorId);
  
  if (!lobby.creatorId || lobby.creatorId !== playerId) {
    console.log('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –ª–æ–±–±–∏');
    return res.status(403).json({ error: 'only creator can delete' });
  }
  
  try {
    console.log('üóÑÔ∏è –£–¥–∞–ª—è–µ–º –ª–æ–±–±–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    // –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∫–∞—Å–∫–∞–¥–Ω–æ —É–¥–∞–ª—è—Ç—Å—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏)
    await lobbyQueries.deleteLobby(req.params.id);
    console.log('üíæ –õ–æ–±–±–∏ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
    lobbies.delete(req.params.id);
    console.log('üß† –õ–æ–±–±–∏ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –ø–∞–º—è—Ç–∏');
    
    console.log('‚úÖ –õ–æ–±–±–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ:', req.params.id);
    res.json({ deleted: true });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–±–±–∏:', error);
    res.status(500).json({ error: 'internal error' });
  }
});

// Health check
app.get('/ping', (_, res) => {
  res.json({ message: 'pong' });
});

// –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–±–±–∏
app.get('/debug/lobbies', async (req, res) => {
  try {
    const dbLobbies = await lobbyQueries.getAllLobbiesDebug();
    const memoryLobbies = Array.from(lobbies.entries()).map(([id, lobby]) => ({
      id,
      players_count: lobby.players.length,
      status: lobby.status,
      created_at: new Date(lobby.createdAt).toISOString()
    }));
    
    res.json({
      database_lobbies: dbLobbies,
      memory_lobbies: memoryLobbies
    });
  } catch (error) {
    console.error('Debug error:', error);
    res.status(500).json({ error: error.message });
  }
});

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –ª–æ–±–±–∏
app.post('/debug/cleanup', async (req, res) => {
  try {
    const deleted = await lobbyQueries.deleteEmptyLobbies();
    res.json({ deleted_count: deleted });
  } catch (error) {
    console.error('Cleanup error:', error);
    res.status(500).json({ error: error.message });
  }
});

// –¢–æ–ø —Ä–µ–π—Ç–∏–Ω–≥–∞
app.get('/rating', async (req, res) => {
  try {
    const limit = parseInt(req.query.limit);
    const list = await gameQueries.getTopPlayers(isNaN(limit) || limit <= 0 ? 0 : limit);
    res.json(list);
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø —Ä–µ–π—Ç–∏–Ω–≥–∞:', e);
    res.status(500).json({ error: 'internal error' });
  }
});

// –ü—Ä–æ—Ñ–∏–ª—å/—Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/users/:id/stats', async (req, res) => {
  try {
    const stats = await gameQueries.getUserStats(req.params.id);
    res.json(stats);
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞:', e);
    res.status(500).json({ error: 'internal error' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/users/:id', async (req, res) => {
  try {
    const user = await userQueries.getUser(req.params.id);
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }
    res.json({
      id: user.id,
      username: user.username,
      first_name: user.first_name,
      last_name: user.last_name
    });
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', e);
    res.status(500).json({ error: 'internal error' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–±–±–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ—Ç–æ—Ä—ã–µ –æ–Ω —Å–æ–∑–¥–∞–ª)
app.get('/users/:id/lobbies', async (req, res) => {
  try {
    const userLobbies = await lobbyQueries.getUserLobbies(req.params.id);
    console.log(`üìã –ü–æ–ª—É—á–µ–Ω—ã –ª–æ–±–±–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.params.id}:`, userLobbies);
    res.json(userLobbies);
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–±–±–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', e);
    res.status(500).json({ error: 'internal error' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/users/:id/avatar', async (req, res) => {
  try {
    const { id } = req.params;
    const avatar = await userQueries.getUserAvatar(id);
    res.json({ avatar });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({ error: 'Failed to get user avatar' });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/users/:id/avatar', async (req, res) => {
  try {
    const { id } = req.params;
    const { avatar } = req.body;
    
    if (!avatar) {
      return res.status(400).json({ error: 'Avatar is required' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≤–∞—Ç–∞—Ä–∫–∞ –∏–∑ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Å–ø–∏—Å–∫–∞
    const allowedAvatars = ['A1', 'A2', 'A3', 'A4', 'A5'];
    if (!allowedAvatars.includes(avatar)) {
      return res.status(400).json({ error: 'Invalid avatar' });
    }
    
    await userQueries.updateUserAvatar(id, avatar);
    console.log(`‚úÖ –ê–≤–∞—Ç–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${avatar}`);
    res.json({ message: 'Avatar updated successfully', avatar });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({ error: 'Failed to update user avatar' });
  }
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–æ–≤)
app.post('/games/:id/roll', async (req, res) => {
  const lobby = lobbies.get(req.params.id);
  if (!lobby) return res.status(404).json({ error: 'not found' });
  const { playerId } = req.body;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã
  if (!lobby.currentResults) {
    console.log(`üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ª–æ–±–±–∏ ${req.params.id}`);
    let results;
    let winners;
    let rerollCount = 0;
    do {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
      results = lobby.players.map(p => ({
      playerId: p.id,
      playerName: `${p.first_name || ''} ${p.last_name || ''}`.trim() || p.username || '–ò–≥—Ä–æ–∫',
        diceValue: Math.floor(Math.random() * 6) + 1
    }));
      const max = Math.max(...results.map(r => r.diceValue));
      winners = results.filter(r => r.diceValue === max);
      if (winners.length !== 1) rerollCount += 1;
    } while (winners.length !== 1 && rerollCount < 50);
    
    lobby.currentResults = results;
    lobby.winner = winners[0];
    lobby.status = 'finished';
    // Persist results and finish status
    try {
      // Users should already be registered when they first entered the app

      await gameQueries.saveGameResults(req.params.id, results.map(r => ({
        playerId: r.playerId,
        diceValue: r.diceValue,
        isWinner: r.playerId === lobby.winner.playerId
      })));
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ (+15/-15, –Ω–µ –Ω–∏–∂–µ 0)
      await gameQueries.applyRatingResults(results.map(r => ({
        playerId: r.playerId,
        isWinner: r.playerId === lobby.winner.playerId
      })));
      await lobbyQueries.finishLobby(req.params.id);
      // –°–∏–≥–Ω–∞–ª —Ñ—Ä–æ–Ω—Ç—É –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (lobby.winner?.playerId) {
        try { localStorage; } catch {}
        sseBroadcast('lobby_update', { id: lobby.id, currentPlayers: lobby.players.length, status: lobby.status, statsChanged: true });
      }
    } catch (e) {
      console.error('DB error saving game results:', e);
    }
    console.log(`üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã –≤ –ª–æ–±–±–∏ ${req.params.id}:`, lobby.currentResults);
    return res.json({ results: lobby.currentResults, winner: lobby.winner, tieResolved: rerollCount > 0, rerollCount });
  } else {
    console.log(`üé≤ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ª–æ–±–±–∏ ${req.params.id}`);
  }
  
  res.json({ results: lobby.currentResults, winner: lobby.winner, tieResolved: false, rerollCount: 0 });
});

// –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–≥—Ä—É
app.post('/games/:id/play-again', (req, res) => {
  const lobby = lobbies.get(req.params.id);
  if (!lobby) return res.status(404).json({ error: 'not found' });
  const { playerId } = req.body;

  // –û–±–Ω–æ–≤–∏—Ç—å –æ–Ω–ª–∞–π–Ω-—Ñ–ª–∞–≥–∏ (–±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è)
  purgeOfflinePlayers(lobby);

  // –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ —É–∂–µ –≤–µ—Ä–Ω—É–ª—Å—è –≤ –ª–æ–±–±–∏ (–Ω–µ –≤ —ç–∫—Ä–∞–Ω–µ –∏–≥—Ä—ã) ‚Äî –Ω–µ–ª—å–∑—è –Ω–∞—á–∏–Ω–∞—Ç—å –±–µ–∑ –Ω–µ–≥–æ
  const leftPlayer = lobby.players.find(p => p.screen && p.screen !== 'game');
  if (leftPlayer) {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—É—é –ø—Ä–µ–¥—ã–¥—É—â—É—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
    lobby.playAgain = new Set();
    delete lobby.playAgainDeclinedBy;
    delete lobby.playAgainInitiator;
    return res.json({
      status: 'player_left',
      allReady: false,
      message: `–ò–≥—Ä–æ–∫ ${`${leftPlayer.first_name || ''} ${leftPlayer.last_name || ''}`.trim() || leftPlayer.username || '–ò–≥—Ä–æ–∫'} –≤—ã—à–µ–ª –≤ –ª–æ–±–±–∏`,
      waitingFor: lobby.players,
      readyPlayers: []
    });
  }

  // –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –≤—ã—à–µ–ª –∏ –∏–≥—Ä–æ–∫–æ–≤ –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞ ‚Äî –Ω–µ –¥–∞–µ–º –Ω–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–≥—Ä—É
  if (lobby.players.length < lobby.maxPlayers) {
    const leftName = lobby.lastPlayerLeft?.username || '–æ–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤';
    return res.json({
      status: 'player_left',
      allReady: false,
      message: `–ò–≥—Ä–æ–∫ ${leftName} –≤—ã—à–µ–ª –∏–∑ –ª–æ–±–±–∏`,
      waitingFor: lobby.players
    });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ª–æ–±–±–∏
  const requestingPlayer = lobby.players.find(p => p.id === playerId);
  if (!requestingPlayer) {
    return res.status(400).json({ error: 'player not found in lobby' });
  }

  if (!lobby.playAgain) lobby.playAgain = new Set();
  // –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ü–∏–∫–ª "–∏–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞" ‚Äî –æ—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
  delete lobby.playAgainDeclinedBy;
  if (lobby.playAgain.size === 0) {
    lobby.playAgainInitiator = playerId;
  }
  lobby.playAgain.add(playerId);
  const allReady = lobby.playAgain.size === lobby.players.length;
  if (allReady) {
    lobby.status = 'playing';
    lobby.currentResults = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    lobby.winner = null;
    lobby.playAgain = new Set(); // reset
    delete lobby.playAgainInitiator;
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã
    lobby.players.forEach(p => p.isReady = false);
  }
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
  const waitingPlayers = lobby.players.filter(p => !lobby.playAgain.has(p.id));
  const readyPlayers = lobby.players.filter(p => lobby.playAgain.has(p.id));
  
  res.json({
    status: allReady ? 'ready_to_play' : 'waiting',
    allReady,
    message: allReady ? '–í—Å–µ –∏–≥—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—ã!' : `–û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: ${waitingPlayers.map(p => `${p.first_name || ''} ${p.last_name || ''}`.trim() || p.username || '–ò–≥—Ä–æ–∫').join(', ')}`,
    waitingFor: waitingPlayers,
    readyPlayers
  });
});

// –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–≥—Ä—É
app.post('/games/:id/decline-play-again', (req, res) => {
  const lobby = lobbies.get(req.params.id);
  if (!lobby) return res.status(404).json({ error: 'not found' });
  const { playerId } = req.body;
  const player = lobby.players.find(p => p.id === playerId);
  if (!player) return res.status(400).json({ error: 'player not found' });
  if (!lobby.playAgain || lobby.playAgain.size === 0) return res.status(400).json({ error: 'no active request' });
  lobby.playAgainDeclinedBy = playerId;
  lobby.playAgain.clear();
  delete lobby.playAgainInitiator;
  lobby.status = 'finished';
  
  res.json({ status: 'declined' });
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–≥—Ä—ã
app.get('/games/:id/play-again-status', (req, res) => {
  const lobby = lobbies.get(req.params.id);
  if (!lobby) return res.status(404).json({ error: 'not found' });
  
  // –û–±–Ω–æ–≤–∏—Ç—å –æ–Ω–ª–∞–π–Ω-—Ñ–ª–∞–≥–∏ (–±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è)
  purgeOfflinePlayers(lobby);
  
  // –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –≤—ã—à–µ–ª ‚Äî —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
  if (lobby.players.length < lobby.maxPlayers) {
    const leftName = lobby.lastPlayerLeft?.username || '–æ–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤';
    return res.json({
      readyPlayers: [],
      waitingFor: lobby.players,
      allReady: false,
      totalPlayers: lobby.players.length,
      status: 'player_left',
      message: `–ò–≥—Ä–æ–∫ ${leftName} –≤—ã—à–µ–ª –∏–∑ –ª–æ–±–±–∏`
    });
  }

  // –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–≥—Ä–æ–∫ –Ω–µ –≤ —ç–∫—Ä–∞–Ω–µ –∏–≥—Ä—ã ‚Äî –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π —Å—Ç–∞—Ä—Ç –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º
  const leftPlayer = lobby.players.find(p => p.screen && p.screen !== 'game');
  if (leftPlayer) {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ—à–ª—ã–µ –æ—Ç–º–µ—Ç–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –Ω–µ —Å–ª–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    if (lobby.playAgain && lobby.playAgain instanceof Set) lobby.playAgain.clear();
    delete lobby.playAgainDeclinedBy;
    delete lobby.playAgainInitiator;
    return res.json({
      readyPlayers: [],
      waitingFor: lobby.players,
      allReady: false,
      totalPlayers: lobby.players.length,
      status: 'player_left',
      message: `–ò–≥—Ä–æ–∫ ${`${leftPlayer.first_name || ''} ${leftPlayer.last_name || ''}`.trim() || leftPlayer.username || '–ò–≥—Ä–æ–∫'} –≤—ã—à–µ–ª –≤ –ª–æ–±–±–∏`
    });
  }

  if (lobby.playAgainDeclinedBy) {
    const decliner = lobby.players.find(p => p.id === lobby.playAgainDeclinedBy);
    const initiator = lobby.playAgainInitiator ? lobby.players.find(p => p.id === lobby.playAgainInitiator) : null;
    return res.json({
      status: 'declined',
      decliner,
      initiator,
      message: `–ò–≥—Ä–æ–∫ –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞`,
      allReady: false,
      readyPlayers: [],
      waitingFor: []
    });
  }
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
  const readyPlayers = lobby.players.filter(p => lobby.playAgain?.has(p.id));
  const waitingFor = lobby.players.filter(p => !lobby.playAgain?.has(p.id));
  const allReady = readyPlayers.length === lobby.players.length;
  
  const initiator = lobby.playAgainInitiator ? lobby.players.find(p => p.id === lobby.playAgainInitiator) : null;
  // –ï—Å–ª–∏ –≤—Å–µ –≥–æ—Ç–æ–≤—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å playing
  if (allReady && lobby.status !== 'playing') {
    lobby.status = 'playing';
    sseBroadcast('lobby_update', { id: lobby.id, currentPlayers: lobby.players.length, status: lobby.status });
  }
  
  res.json({
    readyPlayers,
    waitingFor,
    allReady,
    initiator,
    totalPlayers: lobby.players.length,
    status: lobby.status === 'playing' ? 'ready_to_play' : 'waiting'
  });
});


app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
  // –ü–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–±–±–∏ –∏–∑ –ë–î
  loadLobbiesFromDatabase();
  console.log('‚ÑπÔ∏è Ensure DB file exists at:', require('path').join(__dirname, 'game.db'));
});
