const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbPath = path.join(__dirname, 'game.db');

// –°–æ–∑–¥–∞–Ω–∏–µ/–æ—Ç–∫—Ä—ã—Ç–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database(dbPath, (err) => {
  if (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite:', err.message);
  } else {
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    try {
      // node-sqlite3 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é busyTimeout
      db.configure && db.configure('busyTimeout', 30000);
      console.log('‚úÖ SQLite busyTimeout —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ db.configure (30 —Å–µ–∫—É–Ω–¥)');
    } catch (e) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å db.configure("busyTimeout"):', e?.message);
    }
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    initDatabase();
  }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function initDatabase() {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º DELETE —Ä–µ–∂–∏–º –∂—É—Ä–Ω–∞–ª–∞ –≤–º–µ—Å—Ç–æ WAL –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
  db.run('PRAGMA journal_mode = DELETE;', (err) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ journal mode: ' + err.message);
    } else {
      console.log('‚úÖ Journal mode —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (DELETE)');
    }
  });

  // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
  db.run('PRAGMA foreign_keys = ON;', (err) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è foreign keys:', err.message);
    } else {
      console.log('‚úÖ Foreign keys –≤–∫–ª—é—á–µ–Ω—ã');
    }
  });

  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–ª—è –∑–∞–Ω—è—Ç–æ–π –ë–î
  db.run('PRAGMA busy_timeout = 30000;', (err) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ busy_timeout:', err.message);
    } else {
      console.log('‚úÖ Busy timeout —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (30 —Å–µ–∫—É–Ω–¥)');
    }
  });

  // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  db.run(`
    CREATE TABLE IF NOT EXISTS users (
      id TEXT PRIMARY KEY,
      username TEXT NOT NULL,
      first_name TEXT,
      last_name TEXT,
      avatar TEXT DEFAULT NULL,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      last_seen DATETIME DEFAULT CURRENT_TIMESTAMP
    )
  `, (err) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã users:', err.message);
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ users –≥–æ—Ç–æ–≤–∞');
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É avatar –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±–∞–∑)
      db.run('ALTER TABLE users ADD COLUMN avatar TEXT DEFAULT NULL', () => {});
    }
  });

  // –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ä–µ–π—Ç–∏–Ω–≥ –∏ –ø–æ–±–µ–¥—ã)
  db.run(`
    CREATE TABLE IF NOT EXISTS user_stats (
      user_id TEXT PRIMARY KEY,
      rating INTEGER NOT NULL DEFAULT 0,
      games_played INTEGER NOT NULL DEFAULT 0,
      games_won INTEGER NOT NULL DEFAULT 0,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
    )
  `, (err) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã user_stats:', err.message);
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_stats –≥–æ—Ç–æ–≤–∞');
    }
  });

  // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ª–æ–±–±–∏
  db.run(`
    CREATE TABLE IF NOT EXISTS lobbies (
      id TEXT PRIMARY KEY,
      creator_id TEXT NOT NULL,
      creator_first_name TEXT,
      creator_last_name TEXT,
      type TEXT NOT NULL CHECK (type IN ('duel', 'lobby')),
      bet REAL NOT NULL DEFAULT 0,
      is_public BOOLEAN NOT NULL DEFAULT 0,
      open_profile BOOLEAN NOT NULL DEFAULT 1,
      max_players INTEGER NOT NULL,
      current_players INTEGER NOT NULL DEFAULT 0,
      status TEXT NOT NULL DEFAULT 'waiting' CHECK (status IN ('waiting', 'ready', 'playing', 'finished')),
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      finished_at DATETIME,
      FOREIGN KEY (creator_id) REFERENCES users (id) ON DELETE CASCADE
    )
  `, (err) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã lobbies:', err.message);
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ lobbies –≥–æ—Ç–æ–≤–∞');
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±–∞–∑)
      db.run('ALTER TABLE lobbies ADD COLUMN creator_first_name TEXT', () => {});
      db.run('ALTER TABLE lobbies ADD COLUMN creator_last_name TEXT', () => {});
      db.run('ALTER TABLE lobbies ADD COLUMN current_players INTEGER DEFAULT 0', () => {});
    }
  });

  // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ª–æ–±–±–∏
  db.run(`
    CREATE TABLE IF NOT EXISTS lobby_players (
      lobby_id TEXT NOT NULL,
      player_id TEXT NOT NULL,
      role TEXT NOT NULL CHECK (role IN ('creator', 'player')),
      joined_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      is_ready BOOLEAN DEFAULT 0,
      left_at DATETIME,
      PRIMARY KEY (lobby_id, player_id),
      FOREIGN KEY (lobby_id) REFERENCES lobbies (id) ON DELETE CASCADE,
      FOREIGN KEY (player_id) REFERENCES users (id) ON DELETE CASCADE
    )
  `, (err) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã lobby_players:', err.message);
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ lobby_players –≥–æ—Ç–æ–≤–∞');
    }
  });

  // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä
  db.run(`
    CREATE TABLE IF NOT EXISTS game_results (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      lobby_id TEXT NOT NULL,
      player_id TEXT NOT NULL,
      dice_value INTEGER NOT NULL,
      is_winner BOOLEAN NOT NULL DEFAULT 0,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (lobby_id) REFERENCES lobbies (id) ON DELETE CASCADE,
      FOREIGN KEY (player_id) REFERENCES users (id) ON DELETE CASCADE
    )
  `, (err) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã game_results:', err.message);
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ game_results –≥–æ—Ç–æ–≤–∞');
    }
  });
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ SQLITE_BUSY
function retryOnBusy(operation, maxRetries = 3, delay = 100) {
  return new Promise((resolve, reject) => {
    let attempts = 0;

    function attempt() {
      attempts++;
      operation()
        .then(resolve)
        .catch(err => {
          if (err && err.code === 'SQLITE_BUSY' && attempts < maxRetries) {
            console.log(`‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∞, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxRetries} —á–µ—Ä–µ–∑ ${delay}–º—Å`);
            setTimeout(attempt, delay * attempts);
          } else {
            reject(err);
          }
        });
    }

    attempt();
  });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
const userQueries = {
  // –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  upsertUser(userId, firstName = null, lastName = null, telegramUsername = null) {
    const operation = () => new Promise((resolve, reject) => {
      // –§–æ—Ä–º–∏—Ä—É–µ–º username –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É—è –ø–æ–ª–Ω–æ–µ –∏–º—è
      let username = '';
      
      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –ü–æ–ª–Ω–æ–µ –∏–º—è (firstName + lastName)
      if (firstName || lastName) {
        username = `${firstName || ''} ${lastName || ''}`.trim();
      }
      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: telegramUsername
      else if (telegramUsername) {
        username = telegramUsername;
      }
      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: fallback
      else {
        username = 'anonymous';
      }
      
      console.log(`üìù –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ username –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, {
        firstName,
        lastName,
        telegramUsername,
        resultUsername: username
      });
      
      const stmt = db.prepare(`
        INSERT INTO users (id, first_name, last_name, username, last_seen)
        VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)
        ON CONFLICT(id) DO UPDATE SET
          first_name = excluded.first_name,
          last_name = excluded.last_name,
          username = excluded.username,
          last_seen = CURRENT_TIMESTAMP
      `);

      stmt.run([userId, firstName, lastName, username], function(err) {
        stmt.finalize();
        if (err) {
          reject(err);
        } else {
          // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ user_stats, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
          db.run('INSERT OR IGNORE INTO user_stats (user_id) VALUES (?)', [userId], (e) => {
            if (e) console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å user_stats:', e.message);
            resolve(this.lastID);
          });
        }
      });
    });

    return retryOnBusy(operation);
  },

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
  getUser(userId) {
    return new Promise((resolve, reject) => {
      db.get('SELECT * FROM users WHERE id = ?', [userId], (err, row) => {
        if (err) {
          reject(err);
        } else {
          resolve(row);
        }
      });
    });
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  updateLastSeen(userId) {
    const operation = () => new Promise((resolve, reject) => {
      const stmt = db.prepare('UPDATE users SET last_seen = CURRENT_TIMESTAMP WHERE id = ?');
      stmt.run([userId], function(err) {
        stmt.finalize();
        if (err) {
          reject(err);
        } else {
          resolve(this.changes);
        }
      });
    });
    return retryOnBusy(operation);
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  updateUserAvatar(userId, avatar) {
    const operation = () => new Promise((resolve, reject) => {
      const stmt = db.prepare('UPDATE users SET avatar = ? WHERE id = ?');
      stmt.run([avatar, userId], function(err) {
        stmt.finalize();
        if (err) {
          reject(err);
        } else {
          resolve(this.changes);
        }
      });
    });
    return retryOnBusy(operation);
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–º—è –∏ –∞–≤–∞—Ç–∞—Ä)
  updateUserProfile(userId, username, avatar) {
    const operation = () => new Promise((resolve, reject) => {
      const stmt = db.prepare('UPDATE users SET username = ?, avatar = ? WHERE id = ?');
      stmt.run([username, avatar, userId], function(err) {
        stmt.finalize();
        if (err) {
          reject(err);
        } else {
          resolve(this.changes);
        }
      });
    });
    return retryOnBusy(operation);
  },

  // –ü–æ–ª—É—á–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getUserAvatar(userId) {
    return new Promise((resolve, reject) => {
      db.get('SELECT avatar FROM users WHERE id = ?', [userId], (err, row) => {
        if (err) {
          reject(err);
        } else {
          resolve(row ? row.avatar : null);
        }
      });
    });
  }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–±–±–∏
const lobbyQueries = {
  // –°–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏
  async createLobby(lobbyData) {
    const operation = () => new Promise((resolve, reject) => {
      const { id, creator_id, type, bet, is_public, open_profile, max_players, creator_first_name = null, creator_last_name = null } = lobbyData;

      const stmt = db.prepare(`
        INSERT INTO lobbies (id, creator_id, type, bet, is_public, open_profile, max_players, creator_first_name, creator_last_name, current_players)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, 0)
      `);

      stmt.run([id, creator_id, type, bet, is_public ? 1 : 0, open_profile ? 1 : 0, max_players, creator_first_name, creator_last_name], function(err) {
        stmt.finalize();
        if (err) {
          reject(err);
        } else {
          resolve(this.lastID);
        }
      });
    });

    await retryOnBusy(operation);
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–∞–∫ –∏–≥—Ä–æ–∫–∞ –≤ –ª–æ–±–±–∏
    await this.addPlayerToLobby(lobbyData.id, lobbyData.creator_id, 'creator');
  },

  // –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ –ª–æ–±–±–∏
  async addPlayerToLobby(lobbyId, playerId, role = 'player') {
    const operation = () => new Promise((resolve, reject) => {
      const stmt = db.prepare(`
        INSERT OR REPLACE INTO lobby_players (lobby_id, player_id, role, joined_at)
        VALUES (?, ?, ?, CURRENT_TIMESTAMP)
      `);

      stmt.run([lobbyId, playerId, role], function(err) {
        stmt.finalize();
        if (err) {
          reject(err);
        } else {
          resolve(this.lastID);
        }
      });
    });

    await retryOnBusy(operation);
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    await this.updatePlayerCount(lobbyId);
  },

  // –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–∑ –ª–æ–±–±–∏ (–ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø–æ–∫–∏–Ω—É–≤—à–∏–π)
  async removePlayerFromLobby(lobbyId, playerId) {
    const operation = () => new Promise((resolve, reject) => {
      const stmt = db.prepare(`
        UPDATE lobby_players 
        SET left_at = CURRENT_TIMESTAMP 
        WHERE lobby_id = ? AND player_id = ? AND left_at IS NULL
      `);

      stmt.run([lobbyId, playerId], function(err) {
        stmt.finalize();
        if (err) {
          reject(err);
        } else {
          resolve(this.changes);
        }
      });
    });

    await retryOnBusy(operation);
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    await this.updatePlayerCount(lobbyId);
    // –£–¥–∞–ª—è–µ–º –ª–æ–±–±–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å—Ç–∞–ª–æ –ø—É—Å—Ç—ã–º, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const deleteResult = await this.deleteEmptyLobbies();
    return deleteResult;
  },

  // –ü–æ–ª—É—á–∏—Ç—å –ª–æ–±–±–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ—Ç–æ—Ä—ã–µ –æ–Ω —Å–æ–∑–¥–∞–ª)
  getUserLobbies(userId) {
    return new Promise((resolve, reject) => {
      db.all(
        'SELECT * FROM lobbies WHERE creator_id = ? ORDER BY created_at DESC',
        [userId],
        (err, rows) => {
          if (err) {
            reject(err);
          } else {
            resolve(rows);
          }
        }
      );
    });
  },

  // –£–¥–∞–ª–∏—Ç—å –ª–æ–±–±–∏ (—Å –∫–∞—Å–∫–∞–¥–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π)
  deleteLobby(lobbyId) {
    const operation = () => new Promise((resolve, reject) => {
      // –ë–ª–∞–≥–æ–¥–∞—Ä—è ON DELETE CASCADE, —É–¥–∞–ª–µ–Ω–∏–µ –ª–æ–±–±–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
      const stmt = db.prepare('DELETE FROM lobbies WHERE id = ?');
      stmt.run([lobbyId], function(err) {
        stmt.finalize();
        if (err) {
          reject(err);
        } else {
          resolve(this.changes);
        }
      });
    });

    return retryOnBusy(operation);
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –ª–æ–±–±–∏
  updatePlayerCount(lobbyId) {
    const operation = () => new Promise((resolve, reject) => {
      const stmt = db.prepare(`
        UPDATE lobbies 
        SET current_players = (
          SELECT COUNT(*) 
          FROM lobby_players 
          WHERE lobby_id = ? AND left_at IS NULL
        )
        WHERE id = ?
      `);

      stmt.run([lobbyId, lobbyId], function(err) {
        stmt.finalize();
        if (err) {
          reject(err);
        } else {
          resolve(this.changes);
        }
      });
    });

    return retryOnBusy(operation);
  },

  // –£–¥–∞–ª–∏—Ç—å –ø—É—Å—Ç—ã–µ –ª–æ–±–±–∏ (—Å 0 –∏–≥—Ä–æ–∫–æ–≤)
  async deleteEmptyLobbies() {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º ID –ª–æ–±–±–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã
    const checkOperation = () => new Promise((resolve, reject) => {
      const stmt = db.prepare(`
        SELECT id, current_players, status, created_at 
        FROM lobbies 
        WHERE current_players = 0 
        AND status IN ('waiting', 'ready')
      `);

      stmt.all([], function(err, rows) {
        stmt.finalize();
        if (err) {
          reject(err);
        } else {
          resolve(rows);
        }
      });
    });

    const candidatesForDeletion = await retryOnBusy(checkOperation);
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${candidatesForDeletion.length} –ø—É—Å—Ç—ã—Ö –ª–æ–±–±–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:`, candidatesForDeletion);

    if (candidatesForDeletion.length === 0) {
      return { deletedCount: 0, deletedIds: [] };
    }

    const deletedIds = candidatesForDeletion.map(lobby => lobby.id);

    const operation = () => new Promise((resolve, reject) => {
      const stmt = db.prepare(`
        DELETE FROM lobbies 
        WHERE current_players = 0 
        AND status IN ('waiting', 'ready')
      `);

      stmt.run([], function(err) {
        stmt.finalize();
        if (err) {
          reject(err);
        } else {
          console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${this.changes} –ø—É—Å—Ç—ã—Ö –ª–æ–±–±–∏`);
          resolve(this.changes);
        }
      });
    });

    const deletedCount = await retryOnBusy(operation);
    return { deletedCount, deletedIds };
  },

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ª–æ–±–±–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  async getAllLobbiesDebug() {
    const operation = () => new Promise((resolve, reject) => {
      const stmt = db.prepare(`
        SELECT l.id, l.current_players, l.status, l.created_at,
               COUNT(lp.player_id) as actual_players
        FROM lobbies l
        LEFT JOIN lobby_players lp ON l.id = lp.lobby_id AND lp.left_at IS NULL
        GROUP BY l.id
        ORDER BY l.created_at DESC
      `);

      stmt.all([], function(err, rows) {
        stmt.finalize();
        if (err) {
          reject(err);
        } else {
          resolve(rows);
        }
      });
    });

    return retryOnBusy(operation);
  },

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ª–æ–±–±–∏
  updateLobbyStatus(lobbyId, status) {
    const operation = () => new Promise((resolve, reject) => {
      const stmt = db.prepare('UPDATE lobbies SET status = ? WHERE id = ?');
      stmt.run([status, lobbyId], function(err) {
        stmt.finalize();
        if (err) {
          reject(err);
        } else {
          resolve(this.changes);
        }
      });
    });
    return retryOnBusy(operation);
  },

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
  finishLobby(lobbyId) {
    const operation = () => new Promise((resolve, reject) => {
      const stmt = db.prepare('UPDATE lobbies SET status = ?, finished_at = CURRENT_TIMESTAMP WHERE id = ?');
      stmt.run(['finished', lobbyId], function(err) {
        stmt.finalize();
        if (err) {
          reject(err);
        } else {
          resolve(this.changes);
        }
      });
    });
    return retryOnBusy(operation);
  },

  updatePlayerReady(lobbyId, playerId, isReady) {
    const operation = () => new Promise((resolve, reject) => {
      const stmt = db.prepare('UPDATE lobby_players SET is_ready = ? WHERE lobby_id = ? AND player_id = ? AND left_at IS NULL');
      stmt.run([isReady ? 1 : 0, lobbyId, playerId], function(err) {
        stmt.finalize();
        if (err) {
          reject(err);
        } else {
          resolve(this.changes);
        }
      });
    });
    return retryOnBusy(operation);
  },

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ª–æ–±–±–∏ —Å –∏–≥—Ä–æ–∫–∞–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  getAllLobbiesWithPlayers() {
    return new Promise((resolve, reject) => {
      const query = `
        SELECT 
          l.*,
          lp.player_id,
          lp.role,
          lp.joined_at as player_joined_at,
          lp.is_ready,
          u.first_name,
          u.last_name,
          u.username
        FROM lobbies l
        LEFT JOIN lobby_players lp ON l.id = lp.lobby_id AND lp.left_at IS NULL
        LEFT JOIN users u ON lp.player_id = u.id
        WHERE l.status IN ('waiting', 'ready', 'playing')
        ORDER BY l.created_at DESC, lp.joined_at ASC
      `;
      
      db.all(query, [], (err, rows) => {
        if (err) {
          reject(err);
        } else {
          // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ª–æ–±–±–∏
          const lobbiesMap = new Map();
          
          rows.forEach(row => {
            if (!lobbiesMap.has(row.id)) {
              lobbiesMap.set(row.id, {
                id: row.id,
                type: row.type,
                bet: row.bet,
                isPublic: Boolean(row.is_public),
                openProfile: Boolean(row.open_profile),
                creatorId: row.creator_id,
                creatorFirstName: row.creator_first_name || null,
                creatorLastName: row.creator_last_name || null,
                maxPlayers: row.max_players,
                status: row.status,
                createdAt: new Date(row.created_at).getTime(),
                players: []
              });
            }
            
            const lobby = lobbiesMap.get(row.id);
            if (row.player_id) {
              // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –∏–∑ first_name –∏ last_name
              let displayName = 'anonymous';
              if (row.first_name && row.last_name) {
                displayName = `${row.first_name} ${row.last_name}`;
              } else if (row.first_name) {
                displayName = row.first_name;
              } else if (row.last_name) {
                displayName = row.last_name;
              }
              
              lobby.players.push({
                id: row.player_id,
                username: displayName,
                role: row.role,
                joinedAt: new Date(row.player_joined_at).getTime(),
                isReady: row.role === 'creator' ? true : Boolean(row.is_ready), // –°–æ–∑–¥–∞—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤
                online: true // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –æ–Ω–ª–∞–π–Ω
              });
            }
          });
          
          resolve(Array.from(lobbiesMap.values()));
        }
      });
    });
  }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–≥—Ä
const gameQueries = {
  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã
  saveGameResults(lobbyId, results) {
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã –¥–ª—è –ª–æ–±–±–∏ ${lobbyId}:`, results);
    return new Promise((resolve, reject) => {
      const stmt = db.prepare(`
        INSERT INTO game_results (lobby_id, player_id, dice_value, is_winner)
        VALUES (?, ?, ?, ?)
      `);

      db.serialize(() => {
        db.run('BEGIN TRANSACTION', (err) => {
          if (err) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ª–æ–±–±–∏ ${lobbyId}:`, err);
            stmt.finalize();
            return reject(err);
          }

          let pendingInserts = results.length;
          let hasError = false;

          results.forEach(result => {
            stmt.run([
              lobbyId,
              result.playerId,
              result.diceValue,
              result.isWinner ? 1 : 0
            ], (err) => {
              if (err && !hasError) {
                hasError = true;
                console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${result.playerId}:`, err);
                db.run('ROLLBACK');
                stmt.finalize();
                return reject(err);
              }

              pendingInserts--;
              if (pendingInserts === 0 && !hasError) {
                db.run('COMMIT', (commitErr) => {
                  stmt.finalize();
                  if (commitErr) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–º–∏—Ç–∞ –¥–ª—è –ª–æ–±–±–∏ ${lobbyId}:`, commitErr);
                    reject(commitErr);
                  } else {
                    console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –ª–æ–±–±–∏ ${lobbyId}`);
                    resolve(true);
                  }
                });
              }
            });
          });
        });
      });
    });
  },

  // –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ—Å–ª–µ –∏–≥—Ä—ã: +15 –ø–æ–±–µ–¥–∏—Ç–µ–ª—é, -15 –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–º—É (–Ω–µ –Ω–∏–∂–µ 0)
  applyRatingResults(results) {
    console.log('üìà –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞:', results);
    return new Promise((resolve, reject) => {
      const stmt = db.prepare(`
        UPDATE user_stats
        SET 
          rating = MAX(0, rating + ?),
          games_played = games_played + 1,
          games_won = games_won + CASE WHEN ? > 0 THEN 1 ELSE 0 END,
          updated_at = CURRENT_TIMESTAMP
        WHERE user_id = ?
      `);

      db.serialize(() => {
        db.run('BEGIN TRANSACTION', (err) => {
          if (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞:', err);
            stmt.finalize();
            return reject(err);
          }

          let pendingUpdates = results.length;
          let hasError = false;

          results.forEach(r => {
            const delta = r.isWinner ? 15 : -15;
            console.log(`üìä –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è ${r.playerId}: ${delta > 0 ? '+' : ''}${delta}`);
            
            stmt.run([delta, delta, r.playerId], function(err) {
              if (err && !hasError) {
                hasError = true;
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${r.playerId}:`, err);
                db.run('ROLLBACK');
                stmt.finalize();
                return reject(err);
              }

              if (this.changes === 0) {
                console.warn(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ user_stats: ${r.playerId}`);
              } else {
                console.log(`‚úÖ –†–µ–π—Ç–∏–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${r.playerId}, –∏–∑–º–µ–Ω–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${this.changes}`);
              }

              pendingUpdates--;
              if (pendingUpdates === 0 && !hasError) {
                db.run('COMMIT', (commitErr) => {
                  stmt.finalize();
                  if (commitErr) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–º–∏—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞:', commitErr);
                    reject(commitErr);
                  } else {
                    console.log('‚úÖ –†–µ–π—Ç–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤');
                    resolve(true);
                  }
                });
              }
            });
          });
        });
      });
    });
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getUserStats(userId) {
    return new Promise((resolve, reject) => {
      db.get('SELECT rating, games_played as gamesPlayed, games_won as gamesWon FROM user_stats WHERE user_id = ?', [userId], (err, row) => {
        if (err) reject(err);
        else resolve(row || { rating: 0, gamesPlayed: 0, gamesWon: 0 });
      });
    });
  },
  
  // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
  getTopPlayers(limit) {
    return new Promise((resolve, reject) => {
      let query = `
        SELECT 
          u.id,
          u.first_name, 
          u.last_name, 
          u.username,
          s.rating, 
          s.games_played as gamesPlayed, 
          s.games_won as gamesWon
        FROM user_stats s
        JOIN users u ON s.user_id = u.id
        WHERE s.games_played > 0
        ORDER BY s.rating DESC
      `;
      const params = [];
      if (limit > 0) {
        query += ' LIMIT ?';
        params.push(limit);
      }
      db.all(query, params, (err, rows) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤:', err);
          reject(err);
        } else {
          resolve(rows || []);
        }
      });
    });
  },

  // –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getUserGameHistory(userId, limit = 10) {
    return new Promise((resolve, reject) => {
      db.all(`
        SELECT 
          gr.lobby_id,
          gr.dice_value,
          gr.is_winner,
          gr.created_at,
          l.bet,
          l.type
        FROM game_results gr
        JOIN lobbies l ON gr.lobby_id = l.id
        WHERE gr.player_id = ?
        ORDER BY gr.created_at DESC
        LIMIT ?
      `, [userId, limit], (err, rows) => {
        if (err) {
          reject(err);
        } else {
          resolve(rows);
        }
      });
    });
  }
};

module.exports = {
  db,
  userQueries,
  lobbyQueries,
  gameQueries
};